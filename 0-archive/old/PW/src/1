!----------------------------------------------------------------------------
subroutine calcmdefect()  
!----------------------------------------------------------------------------
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! mpi
USE mp_images,     ONLY : nimage
USE mp_bands,      ONLY : nbgrp
USE mp_pools,      ONLY : npool
USE mp_pools, ONLY: inter_pool_comm, intra_pool_comm, nproc_pool, me_pool
USE mp_bands, ONLY: intra_bgrp_comm
USE mp, ONLY: mp_sum, mp_gather, mp_bcast, mp_get

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! control
USE kinds, ONLY: DP,sgl
USE plugin_flags, ONLY : use_calcmdefect 
USE control_flags,    ONLY : gamma_only, io_level
USE run_info,  ONLY: title    ! title of the run

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! extra function
USE noncollin_module, ONLY : noncolin
USE spin_orb,         ONLY : lspinorb
USE lsda_mod, ONLY: lsda, nspin
USE ldaU, ONLY : eth

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! scf
USE ions_base, ONLY : nat, ntyp => nsp, ityp, tau, zv, atm
USE cell_base, ONLY: omega, alat, tpiba2, at, bg, tpiba
USE constants, ONLY: tpi, e2, eps6,pi
USE ener, ONLY: ewld, ehart, etxc, vtxc, etot, etxcc, demet, ef
USE fft_base,  ONLY: dfftp, dffts
USE fft_interfaces, ONLY : fwfft, invfft
USE gvect, ONLY: ngm, gstart, g, gg, gcutm, igtongl
USE klist , ONLY: nks, nelec, xk, wk, degauss, ngauss, igk_k, ngk
USE scf, ONLY: rho, rho_core, rhog_core, v, vltot, vrs
USE vlocal, ONLY: vloc, strf
USE wvfct, ONLY: npwx, nbnd, wg, et
USE gvecw, ONLY: ecutwfc
USE uspp, ONLY: nkb, vkb, dvan
USE uspp_param, ONLY: nh
USE wavefunctions, ONLY : evc,evc1,evc2,evc3,evc4, psic,psic1,psic2
USE fft_types, ONLY:  fft_index_to_3d
!use init_us_2, only: init_us_2_perturb

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! io
USE io_global, ONLY: stdout, ionode, ionode_id
USE io_files, ONLY: nd_nmbr, nwordwfc, iunwfc, prefix, tmp_dir, seqopn, iuntmp
USE clib_wrappers,     ONLY: md5_from_file
USE buffers,          ONLY : open_buffer,get_buffer, close_buffer, save_buffer
!use input_parameters, only: vperturb_filename,eps_filename, &
!kpoint_initial ,kpoint_final ,bnd_initial ,bnd_final ,&
!calcmlocal ,calcmnonlocal ,calcmcharge 
IMPLICIT NONE


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! control
INTEGER, EXTERNAL :: find_free_unit
INTEGER :: tmp_unit
INTEGER  :: ios
INTEGER, PARAMETER :: n_overlap_tests = 12
REAL(dp), PARAMETER :: eps = 1.d-4
INTEGER, PARAMETER :: io = 77, iob = 78

 CHARACTER(len=32)::vf_md5_cksum="NA"
 CHARACTER(len=32)::epsf_md5_cksum="NA"
 CHARACTER(len=32)::ctlf_md5_cksum="NA"
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! scf
INTEGER :: npw, ig, ibnd, ik, ispin, nbndup, nbnddown, &
nk , ikk,ikk0,  inr, ig1, ig2
INTEGER :: j,   na, nt, ijkb0, ikb,jkb, ih,jh, ik0,ibnd0
INTEGER, ALLOCATABLE :: idx(:), igtog(:), gtoig(:)
LOGICAL :: exst
REAL(DP) :: ek, eloc, enl, etot_

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! parallization
! number of g vectors (union of all k points)
INTEGER ngtot_l ! on this processor
INTEGER, ALLOCATABLE :: ngtot_d(:), ngtot_cumsum(:), indx(:)
INTEGER ngtot_g ! sum over processors
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! parallization
REAL(DP), ALLOCATABLE :: g_l(:,:), g_g(:,:), g2(:)
COMPLEX(DP), ALLOCATABLE :: evc_l(:), evc_g(:), evc_g2(:), avc_tmp(:,:,:), cavc_tmp(:,:,:)

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! parallization
! number of g vectors (union of all k points)
INTEGER ngtot_l ! on this processor
INTEGER, ALLOCATABLE :: ngtot_d(:), ngtot_cumsum(:), indx(:)
INTEGER ngtot_g ! sum over processors
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! parallization
REAL(DP), ALLOCATABLE :: g_l(:,:), g_g(:,:), g2(:)
COMPLEX(DP), ALLOCATABLE :: evc_l(:), evc_g(:), evc_g2(:), avc_tmp(:,:,:), cavc_tmp(:,:,:)

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! intermediate data
COMPLEX(DP), ALLOCATABLE :: aux(:), auxr(:), auxg(:), psiprod(:),vgk(:),vgk_perturb(:),vkb_perturb(:,:)
COMPLEX(DP) :: mnl, ml,mltot,mltot1,mltot2,mnltot,psicnorm,psicprod,enl1,phaseft,psicprod1
COMPLEX(DP) ::  ml_up, ml_down, mnl_d, mnl_p ! rg_spin
LOGICAL :: offrange
REAL(dp)::arg,argt,argt2
COMPLEX(DP)::phase
INTEGER:: irx,iry,irz
INTEGER:: irx2,iry2,irz2
INTEGER:: irx1,iry1,irz1

INTEGER :: ix0,ix1,ix2
INTEGER :: iy0,iy1,iy2
INTEGER :: iz0,iz1,iz2, ikpsi0, ikpsi1, ikpsi2
COMPLEX(DP)::vlfft
COMPLEX(DP) ::  ml0,ml1,ml2, ml3,ml4,ml5,ml6,ml7
 

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!! vl  supercell
integer ::  unit_pert !rg_spin
character (len=75) ::  perturb_file_name!rg_spin
integer :: iunpot_perturb
character (len=75) :: filpot_perturb
character (len=75) :: title_perturb
character (len=3) ,allocatable :: atm_perturb(:)
integer :: nr1x_perturb, nr2x_perturb, nr3x_perturb, nr1_perturb, nr2_perturb, nr3_perturb, &
nat_perturb, ntyp_perturb, ibrav_perturb, plot_num_perturb,  i_perturb,nkb_perturb
integer :: iunplot_perturb, ios_perturb, ipol_perturb, na_perturb, nt_perturb, &
ir_perturb, ndum_perturb
real(DP) :: celldm_perturb (6), gcutm_perturb, dual_perturb, ecut_perturb,  at_perturb(3,3), omega_perturb, alat_perturb
integer, allocatable:: ityp_perturb (:)
real(DP),allocatable:: zv_perturb (:), tau_perturb (:, :)  , plot_perturb (:)
real(DP),allocatable::  V_loc(:,:) !rg_spin
integer :: ir1mod,ir2mod,ir3mod,irnmod
real(DP):: d1,d2,d3

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! charge
COMPLEX(DP), ALLOCATABLE ::  mlat1(:),mlat2(:)
INTEGER :: iscx, iscy,nscx,nscy
REAL(dp)::k0screen, kbT,deltak,deltakG0,deltakG, qxy,qz,lzcutoff
INTEGER:: icount,jcount,kcount
real(DP):: mscreen,mcharge, rmod
INTEGER:: Nlzcutoff,iNlzcutoff,flag1,flag2, nNlzcutoff,Ngzcutoff
!!!!! eps data file 
integer :: nepslines
real(DP),allocatable:: eps_data (:,:)
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

          CHARACTER(LEN=256) :: vperturb_filename='vloc.dat'
          CHARACTER(LEN=256) :: eps_filename='eps.dat'
          CHARACTER(LEN=256) :: eps0mat_filename='eps0mat.h5'
          CHARACTER(LEN=256) :: epsmat_filename='epsmat.h5'
!          CHARACTER(LEN=256) :: calcmcontrol
          INTEGER :: kpoint_initial 
          INTEGER :: kpoint_final 
          INTEGER :: bnd_initial 
          INTEGER :: bnd_final 
          LOGICAL :: calcmlocal =.false.
          LOGICAL :: calcmnonlocal =.false.
          LOGICAL :: calcmcharge =.false.
          LOGICAL :: mcharge_dolfa =.false.
          REAL :: k0screen_read=0.0

!rg_spin
          character(len=256) :: V_0_filename = 'none', Bxc_1_filename='none', Bxc_2_filename='none', Bxc_3_filename='none'
          character(len=256) :: V_p_filename='none'
          character(len=256) :: V_up_filename='none', V_down_filename='none'
!rg_spin



!!!!!!!!!!hdf5
  CHARACTER(LEN=256) :: h5filename      ! Dataset name
  CHARACTER(LEN=256) :: h5datasetname = "matrix-diagonal"     ! Dataset name
 INTEGER     ::   h5rank,h5error ! Error flag
  !INTEGER     ::  i, j
!  real(dp), DIMENSION(3,1465,2) :: h5dataset_data, data_out ! Data buffers
!  real(dp), DIMENSION(3,1465,2) :: h5dataset_data, data_out ! Data buffers
  real(dp), allocatable :: h5dataset_data_double(:), data_out(:)
  integer, allocatable :: h5dataset_data_integer(:)
  INTEGER(HSIZE_T), allocatable :: h5dims(:),h5maxdims(:)


!  real(dp), allocatable :: gw_epsmat_diag_data(:,:,2),  gw_eps0mat_diag_data(:,:,2)
  real(dp), allocatable :: gw_epsmat_diag_data(:,:,:),  gw_eps0mat_diag_data(:,:,:)
  !complex(dp), allocatable :: gw_epsmat_diag_data(:,:,:),  gw_eps0mat_diag_data(:,:,:)
!  real(dp), allocatable :: gw_epsmat_full_data(:,1,1,:,:,2),  gw_eps0mat_full_data(:,1,1,:,:,2)
  real(dp), allocatable :: gw_epsmat_full_data(:,:,:,:,:,:),  gw_eps0mat_full_data(:,:,:,:,:,:)
!  real(dp), allocatable :: gw_epsallmat_full_data(:,1,1,:,:,2)
  real(dp), allocatable :: gw_epsallmat_full_data(:,:,:,:,:,:)

  real(dp), allocatable :: gw_vcoul_data(:,:),gw_qpts_Data(:,:)
  real(dp), allocatable :: gw_blat_data(:),gw_bvec_Data(:,:)
  integer, allocatable :: gw_gind_eps2rho_data(:,:), gw_gind_rho2eps_data(:,:),gw_nmtx_data(:)
  integer :: h5dims1(1),h5dims2(2),h5dims3(3),h5dims4(4),h5dims5(5),h5dims6(6)

   integer, allocatable :: gw_grho_data(:),  gw_geps_data(:),gw_g_components_data(:,:)
  integer, allocatable :: gw_nq_data(:),gw_nmtx_max_data(:),gw_fftgrid_data(:),gw_qgrid_data(:),gw_ng_data(:)
!  integer(i8b), allocatable :: gw_nqi8(:)



    real(DP),allocatable ::gw_qabs(:)
    INTEGER :: gw_q_g_commonsubset_size
    integer(DP),allocatable ::gw_q_g_commonsubset_indinrho(:)
    integer(DP),allocatable ::gw_q_g_commonsubset_indinrhotmp1(:)
    INTEGER :: gind_gw_eps
!!!!!!!!!!hdf5

          NAMELIST / calcmcontrol / vperturb_filename,eps_filename, kpoint_initial, kpoint_final, &
                                 bnd_initial, bnd_final, calcmlocal,calcmnonlocal,calcmcharge, mcharge_dolfa,k0screen_read,& 
                                 V_0_filename, Bxc_1_filename, Bxc_2_filename, Bxc_3_filename, V_p_filename,&  !rg_spin
                                 V_up_filename, V_down_filename  !rg_spin

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!rg_spin
type :: V_file 
   integer :: unit 
   character (len=75) :: filename
   character (len=75) :: title
   character (len=3) ,allocatable :: atm(:)
   integer :: nr1x, nr2x, nr3x, nr1, nr2, nr3, &
   nat, ntyp, ibrav, plot_num,  i,nkb
   integer :: iunplot, ios, ipol, na, nt, &
   ir, ndum
   real(DP) :: celldm(6), gcutm, dual, ecut,  at(3,3), omega, alat
   integer, allocatable:: ityp(:)
   real(DP),allocatable:: zv(:), tau(:, :)  , plot(:)
end type V_file


!type(V_file) :: V_0, Bxc_1, Bxc_2, Bxc_3
!V_0%unit = find_free_unit()
!Bxc_1%unit = find_free_unit()
!Bxc_2%unit = find_free_unit()
!Bxc_3%unit = find_free_unit()
!ALLOCATE ( g2kin(npwx) )
                                 
    Nlzcutoff=dffts%nr3/2
    lzcutoff=Nlzcutoff*alat/dffts%nr1
IF ( use_calcmdefect ) THEN
   IF ( noncolin ) THEN
      if ( lspinorb ) then
         call calcmdefect_soc()
      else
         call calcmdefect_noncolin() 
      endif
  ! ELSE IF (lsda) THEN
  !    call calcmdefect_lsda()
   ELSE   
      call calcmdefect_all()
   ENDIF
ENDIF
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!
!
!
!
!
!IF ( use_calcmdefect ) THEN
!    call calcmdefect_all()
!ENDIF

CONTAINS 
 
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!IO


   subroutine read_perturb_file(v_file_)

      type(V_file) :: v_file_
      integer :: v_file_i_, v_file_ipol_, v_file_nt_, v_file_ir_, v_file_na_

      v_file_%unit = find_free_unit()
      open (unit = v_file_%unit, file = v_file_%filename, form = 'formatted', &
      status = 'old', err = 99, iostat = v_file_%ios)
   99 call errore ('mloc', 'opening file '//TRIM(v_file_%filename), abs (v_file_%ios) )

      read (v_file_%unit, '(a)') v_file_%title
      read (v_file_%unit, * ) v_file_%nr1x, v_file_%nr2x, v_file_%nr3x,&
      v_file_%nr1, v_file_%nr2, v_file_%nr3, v_file_%nat, v_file_%ntyp
    
      allocate(v_file_%plot ( v_file_%nr1*v_file_%nr2*v_file_%nr3))
      allocate(v_file_%ityp (v_file_%nat))
      allocate(v_file_%zv (v_file_%ntyp))
      allocate(v_file_%atm (v_file_%ntyp))
      allocate(v_file_%tau (3,v_file_%nat))
    
      read (v_file_%unit, * ) v_file_%ibrav, v_file_%celldm
      if (v_file_%ibrav == 0) then
         do v_file_i_ = 1,3
            read ( v_file_%unit, * ) ( v_file_%at(v_file_ipol_,v_file_i_),v_file_ipol_=1,3 )
         enddo
         v_file_%alat=v_file_%celldm(1)
      else
         call latgen(v_file_%ibrav,v_file_%celldm,v_file_%at(1,1),v_file_%at(1,2),v_file_%at(1,3),v_file_%omega)
         v_file_%at(:,:)=v_file_%at(:,:)/alat
      endif
      read (v_file_%unit, * ) v_file_%gcutm, v_file_%dual, v_file_%ecut, v_file_%plot_num
      read (v_file_%unit, '(i4,3x,a2,3x,f5.2)') &
            (v_file_nt_, v_file_%atm(v_file_nt_), v_file_%zv(v_file_nt_), v_file_nt_=1, v_file_%ntyp)
      read (v_file_%unit, *) (v_file_%ndum,  (v_file_%tau (v_file_ipol_, v_file_na_), v_file_ipol_ = 1, 3 ), &
         v_file_%ityp(v_file_na_), v_file_na_ = 1, v_file_%nat)
      read (v_file_%unit, * ) (v_file_%plot (v_file_ir_), v_file_ir_ = 1, v_file_%nr1 * v_file_%nr2 * v_file_%nr3)
      v_file_%tau(:,:)=v_file_%tau(:,:)*v_file_%alat/alat

      CALL md5_from_file(v_file_%filename, vf_md5_cksum)
      write (*,*) 'potential files:',TRIM(v_file_%filename),'  MD5 sum:',vf_md5_cksum

      
   end subroutine read_perturb_file

   subroutine get_vloc_colin(V_0, Bxc_3, V_loc)
      type(V_file) :: V_0, Bxc_3
      real(DP) :: V_loc(:,:)

     ! allocate(V_loc( V_0%nr1 * V_0%nr2 * V_0%nr3, 2))

      V_loc(:, 1) = V_0%plot(:) + Bxc_3%plot(:)
      V_loc(:, 2) = V_0%plot(:) - Bxc_3%plot(:)

      
   end subroutine get_vloc_colin

!   subroutine get_vloc_noncolin(V_0, Bxc_3)
!      type(V_file) :: V_0, Bxc_1, Bxc_2, Bxc_3
!      complex(DP), allocatable:: get_vloc_noncolin(:, 4)
!
!      allocate(get_vloc_noncolin( V_0%nr1 * Bxc_1%nr2 * Bxc_3%nr3))

      
!   end subroutine get_vloc_noncolin



  
      



subroutine h5gw_read(h5filename,h5datasetname,h5dataset_data_double,h5dataset_Data_integer,h5dims,h5rank,h5error)
  CHARACTER(LEN=256) :: h5groupname = "/mats"     ! Dataset name
  CHARACTER(LEN=256) :: h5name_buffer 
  INTEGER(HID_T) :: h5file_id       ! File identifier
  INTEGER(HID_T) :: h5group_id       ! Dataset identifier
  INTEGER(HID_T) :: h5dataset_id       ! Dataset identifier
  INTEGER(HID_T) :: h5datatype_id       ! Dataset identifier
  INTEGER(HID_T) :: h5dataspace_id

  INTEGER :: h5dataype       ! Dataset identifier
 
  CHARACTER(LEN=256) :: h5filename      ! Dataset name
  CHARACTER(LEN=256) :: h5datasetname      ! Dataset name
  real(dp), allocatable :: h5dataset_data_double(:), data_out(:)
  integer, allocatable :: h5dataset_data_integer(:)
  LOGICAL :: h5flag,h5flag_integer,h5flag_double           ! TRUE/FALSE flag to indicate 
  INTEGER(HSIZE_T), allocatable :: h5dims(:),h5maxdims(:)
  INTEGER     ::   h5rank,h5nmembers,i,h5datasize
  INTEGER     ::   h5error ! Error flag
  INTEGER(HID_T) :: file_s1_t,h5_file_datatype 
  INTEGER(HID_T) :: mem_s1_t  ,h5_mem_datatype  
  INTEGER(HID_T) :: debugflag=00
  CALL h5open_f(h5error)
  if (h5error<debugflag) then
    write(*,*)  'h5error',h5error
  elseif (h5error<0) then 
    return(h5error)
  endif
  
    !h5 file
    CALL h5fopen_f (h5filename, H5F_ACC_RDWR_F, h5file_id, h5error)
    if (h5error<debugflag) then
      write(*,*)  'h5error',       h5error,trim(h5filename),'h5file_id', h5file_id
    elseif (h5error<0)  then
      return(h5error)
    endif
      !dataset
      CALL h5dopen_f(h5file_id,   trim(h5datasetname), h5dataset_id, h5error)
      if (h5error<debugflag) then
        write(*,*)  'h5error',       h5error, trim(h5datasetname),'h5dataset_id', h5dataset_id
      elseif (h5error<0)  then
        return(h5error)
      endif
        ! dataspace
        call h5dget_space_f(h5dataset_id, h5dataspace_id,  h5error) 
        if (h5error<debugflag) then
          write(*,*)  'h5error',       h5error,'h5dataspace_id',h5dataspace_id
        elseif (h5error<0)  then
          return(h5error)
        endif
          ! rank and shape
          call h5sget_simple_extent_ndims_f(h5dataspace_id, h5rank, h5error) 
          if (h5error<debugflag) then
            write(*,*)  'h5error',       h5error,'h5rank',h5rank, h5dims,h5maxdims
          elseif (h5error<0)  then
            return(h5error)
          endif
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1111
! rank=0 scalar
          if(h5rank==0) then
            h5rank=1
            allocate(h5dims(h5rank))
            allocate(h5maxdims(h5rank))
            h5maxdims(1)=1
            h5dims(1)=1
            h5datasize=1
            do i =1,h5rank
              h5datasize=h5datasize*h5dims(i)
            enddo
            allocate(h5dataset_data_integer(1))
            allocate(h5dataset_data_double(1))
            !allocate(gw_nq(1))
            call H5Dget_type_f(h5dataset_id, h5_file_datatype, h5error);
            if (h5error<debugflag) then
              write(*,*)  'h5error',       h5error,'h5_file_datatype',h5_file_datatype
            elseif (h5error<0)  then
              return(h5error)
            endif
!!!!!!!!!!!!!!!
!debug comment out ok
            ! datatype of memory data, test datatype
            call H5Tget_native_type_f(h5_file_datatype,H5T_DIR_ASCEND_F, h5_mem_datatype,h5error)
              if (h5error<debugflag) then
                write(*,*)  'h5error',       h5error,'h5_mem_datatype',h5_mem_datatype
              elseif (h5error<0)  then
                return(h5error)
              endif
              call h5tequal_F(h5_mem_datatype,H5T_NATIVE_integer,h5flag,h5error)
              if (h5error<debugflag) then
                write(*,*)  'h5error',       h5error,'h5_mem_datatype',h5_mem_datatype,'H5T_NATIVE_integer'
              elseif (h5error<0)  then
                return(h5error)
              endif
              call h5tequal_F(h5_file_datatype,H5T_NATIVE_integer,h5flag,h5error)
              if (h5error<debugflag) then
                write(*,*)  'h5error',       h5error,'h5_file_datatype',h5_file_datatype,h5flag
              elseif (h5error<0)  then
                return(h5error)
              endif
!debug comment out ok
!!!!!!!!!!!!!!!

            call h5tequal_F(h5_file_datatype,H5T_NATIVE_integer,h5flag_integer,h5error)
            call h5tequal_F(h5_file_datatype,H5T_NATIVE_double,h5flag_double,h5error)
            if (h5flag_integer) then
              CALL h5dread_f(h5dataset_id,  h5_file_datatype, h5dataset_Data_integer(1), h5dims, h5error)
              if (h5error<debugflag) then
                write(*,*)  'h5data',h5error,       h5dataset_Data_integer
              elseif (h5error<0)  then
                return(h5error)
              endif
            elseif (h5flag_double) then
              CALL h5dread_f(h5dataset_id,  h5_file_datatype, h5dataset_Data_double(1), h5dims, h5error)
              if (h5error<debugflag) then
                write(*,*)  'h5data',h5error,       h5dataset_Data_double
              elseif (h5error<0)  then
                return(h5error)
              endif
            else
              write(*,*) 'h5 data type not supported'
            endif
            return(h5error)
          endif
! rank=0 scalar
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1111

          allocate(h5dims(h5rank))
          allocate(h5maxdims(h5rank))
          if (h5error<debugflag) then
            write(*,*)  'h5error',       h5error,'h5rank'
          endif 
          call h5sget_simple_extent_dims_f(h5dataspace_id, h5dims, h5maxdims,h5error ) 
          if (h5error<debugflag) then
            write(*,*)  'h5error',       h5error, 'h5dims', h5dims,'h5maxdims',h5maxdims
          elseif (h5error<0)  then
            return(h5error)
          endif
          h5datasize=1
          do i =1,h5rank
            h5datasize=h5datasize*h5dims(i)
          enddo
          allocate(h5dataset_data_double(h5datasize))
          allocate(h5dataset_data_integer(h5datasize))
        ! datatype of dataset
        call H5Dget_type_f(h5dataset_id, h5_file_datatype, h5error);
          if (h5error<debugflag) then
            write(*,*)  'h5error',       h5error,'h5_file_datatype',h5_file_datatype
          elseif (h5error<0)  then
            return(h5error)
          endif
          ! datatype of memory data, test datatype
          call H5Tget_native_type_f(h5_file_datatype,H5T_DIR_ASCEND_F, h5_mem_datatype,h5error)
          if (h5error<debugflag) then
            write(*,*)  'h5error',       h5error,'h5_mem_datatype',h5_mem_datatype
          elseif (h5error<0)  then
            return(h5error)
          endif
          call h5tequal_F(h5_mem_datatype,H5T_NATIVE_DOUBLE,h5flag,h5error)
          if (h5error<debugflag) then
            write(*,*)  'h5error',       h5error,'h5_mem_datatype',h5_mem_datatype,h5flag
          elseif (h5error<0)  then
            return(h5error)
          endif
          call h5tequal_F(h5_file_datatype,H5T_NATIVE_DOUBLE,h5flag,h5error)
          if (h5error<debugflag) then
            write(*,*)  'h5error',       h5error,'h5_file_datatype',h5_file_datatype,h5flag
          elseif (h5error<0)  then
            return(h5error)
          endif
!!!!!!!!!!!!!!!!!!!!!!!!
!! read matrix old
!          call h5tequal_F(h5_file_datatype,H5T_NATIVE_integer,h5flag,h5error)
!          if (h5flag) then
!            CALL h5dread_f(h5dataset_id,  h5_file_datatype, h5dataset_Data_integer, h5dims, h5error)
!            if (h5error<debugflag) then
!              write(*,*)  'h5data',h5error,       h5dataset_Data_integer
!            elseif (h5error<0)  then
!              return(h5error)
!            endif
!          endif
!          call h5tequal_F(h5_file_datatype,H5T_NATIVE_double,h5flag,h5error)
!          if (h5flag) then
!            CALL h5dread_f(h5dataset_id,  h5_file_datatype, h5dataset_Data_double, h5dims, h5error)
!            if (h5error<debugflag) then
!              write(*,*)  'h5data',h5error,       h5dataset_Data_double
!            elseif (h5error<0)  then
!              return(h5error)
!            endif
!          endif
!! read matrix old
!!!!!!!!!!!!!!!!!!!!!!!!

!!!!!!!!!!!!!!!!!!!!!!!!
! read matrix 
            call h5tequal_F(h5_file_datatype,H5T_NATIVE_integer,h5flag_integer,h5error)
            call h5tequal_F(h5_file_datatype,H5T_NATIVE_double,h5flag_double,h5error)
            if (h5flag_integer) then
              CALL h5dread_f(h5dataset_id,  h5_file_datatype, h5dataset_Data_integer, h5dims, h5error)
              if (h5error<debugflag) then
                write(*,*)  'h5data',h5error,       h5dataset_Data_integer
              elseif (h5error<0)  then
                return(h5error)
              endif
            elseif (h5flag_double) then
              CALL h5dread_f(h5dataset_id,  h5_file_datatype, h5dataset_Data_double, h5dims, h5error)
              if (h5error<debugflag) then
                write(*,*)  'h5data',h5error,       h5dataset_Data_double
              elseif (h5error<0)  then
                return(h5error)
              endif
            else
              write(*,*) 'h5 data type not supported'
            endif
 
! read matrix 
!!!!!!!!!!!!!!!!!!!!!!!!


!        CALL h5dread_f(h5dataset_id,  h5_file_datatype, h5dataset_data, h5dims, h5error)
!        if (h5error<debugflag) then
!          write(*,*)  'h5error',       h5error
!        elseif (h5error<0)  then
!          return(h5error)
!        endif
      CALL h5dclose_f(h5dataset_id, h5error)
    CALL h5fclose_f(h5file_id, h5error)
  CALL h5close_f(h5error)
end subroutine h5gw_read


!IO
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    SUBROUTINE calcmdefect_all()! initialization and call M subroutines 

    write (*,*) 'enter calcmdefect module'

    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !extra function: not fully implemented
    ALLOCATE (idx (ngm) )
    ALLOCATE (igtog (ngm) )
    ALLOCATE (gtoig (ngm) )
    idx(:) = 0
    igtog(:) = 0
    IF( lsda )THEN
       nbndup = nbnd
       nbnddown = nbnd
       nk = nks/2
       !     nspin = 2
    ELSE
       nbndup = nbnd
       nbnddown = 0
       nk = nks
       !     nspin = 1
    ENDIF


    DO ispin = 1, nspin
       DO ik = 1, nk
          ikk = ik + nk*(ispin-1)
          idx( igk_k(1:ngk(ikk),ikk) ) = 1
       ENDDO
    ENDDO

    ngtot_l = 0
    DO ig = 1, ngm
       IF( idx(ig) >= 1 )THEN
          ngtot_l = ngtot_l + 1
          igtog(ngtot_l) = ig
          gtoig(ig) = ngtot_l
       ENDIF
    ENDDO
    !extra function: not fully implemented
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


    ALLOCATE (aux(dfftp%nnr))
    ALLOCATE(auxr(dfftp%nnr))
    ALLOCATE(psiprod(dfftp%nnr))
    ALLOCATE(vgk(dfftp%nnr))
    ALLOCATE(vgk_perturb(dfftp%nnr))
    ALLOCATE( auxg( dfftp%ngm ) )
    !mltot=0
    !mnltot=0
    !mltot1=0
    !mltot2=0
    
    !write(*,*) 'use_calcmdefect', use_calcmdefect
    !
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    ! extra data read in, not used
    IF ( npool > 1 .or. nimage > 1 .or. nbgrp > 1 ) &
      CALL errore('calcmdefect', 'pool/band/image parallelization not (yet) implemented',1)
    IF ( noncolin .OR. lspinorb ) &
      CALL errore('calcmdefect', 'noncollinear/spinorbit magnetism not (yet) implemented',2)
    tmp_unit = find_free_unit()
    OPEN(unit=tmp_unit,file = 'calcmdefect.dat',status='old',err=20)
    !OPEN(unit=tmp_unit,file = trim(tmp_dir)//'calcmdefect.dat',status='old',err=20)
    20 continue
        READ(tmp_unit,calcmcontrol,iostat=ios)
    CLOSE(tmp_unit)
    ! extra data read in, not used
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!!! vloc.dat read
    iunpot_perturb=99 
    filpot_perturb=vperturb_filename
    !write(*,*) vperturb_filename
    open (unit = iunpot_perturb, file = filpot_perturb, form = 'formatted', &
         status = 'old', err = 99, iostat = ios_perturb)
    99 call errore ('mloc', 'opening file '//TRIM(filpot_perturb), abs (ios_perturb) )
    
    read (iunpot_perturb, '(a)') title_perturb
    read (iunpot_perturb, * ) nr1x_perturb, nr2x_perturb, nr3x_perturb,&
            nr1_perturb, nr2_perturb, nr3_perturb, nat_perturb, ntyp_perturb
    
    allocate(plot_perturb( nr1_perturb*nr2_perturb*nr3_perturb))
    allocate(ityp_perturb(nat_perturb))
    allocate(zv_perturb(ntyp_perturb))
    allocate(atm_perturb(ntyp_perturb))
    allocate(tau_perturb(3,nat_perturb))
    
    read (iunpot_perturb, * ) ibrav_perturb, celldm_perturb
    if (ibrav_perturb == 0) then
       do i_perturb = 1,3
          read ( iunpot_perturb, * ) ( at_perturb(ipol_perturb,i_perturb),ipol_perturb=1,3 )
       enddo
       alat_perturb=celldm_perturb(1)
    else
       call latgen(ibrav_perturb,celldm_perturb,at_perturb(1,1),at_perturb(1,2),at_perturb(1,3),omega_perturb)
       at_perturb(:,:)=at_perturb(:,:)/alat
    endif
    read (iunpot_perturb, * ) gcutm_perturb, dual_perturb, ecut_perturb, plot_num_perturb
    !read (iunpot_perturb, *) &
    read (iunpot_perturb, '(i4,3x,a2,3x,f5.2)') &
            (nt_perturb, atm_perturb(nt_perturb), zv_perturb(nt_perturb), nt_perturb=1, ntyp_perturb)
    read (iunpot_perturb, *) (ndum_perturb,  (tau_perturb (ipol_perturb, na_perturb), ipol_perturb = 1, 3), &
            ityp_perturb(na_perturb), na_perturb = 1, nat_perturb)
    read (iunpot_perturb, * ) (plot_perturb (ir_perturb), ir_perturb = 1, nr1_perturb * nr2_perturb * nr3_perturb)
    tau_perturb(:,:)=tau_perturb(:,:)*alat_perturb/alat

    !debug output
    !write (*,*) 'dv readin-vrs', sum(plot_perturb(:)-vrs(:,1))
    write (*,*) 'dv readin-vrs: , sum(plot_perturb(:)),sum(vrs(:,1)),sum(plot_perturb(:))-sum(vrs(:,1))'
    write (*,*)  sum(plot_perturb(:)),sum(vrs(:,1)),sum(plot_perturb(:))-sum(vrs(:,1))
    write (*,*) 'at-perturb', at_perturb
    write (*,*) 'alat-perturb', alat_perturb
    write (*,*) 'nr1_perturb ', nr1_perturb
    write (*,*) 'nr2_perturb ', nr2_perturb
    write (*,*) 'nr3_perturb ', nr3_perturb
    write (*,*) 'at', at(:,1)
    write (*,*) 'at', at(:,2)
    write (*,*) 'at', at(:,3)
    write (*,*) 'dfftp%nr1 ', dfftp%nr1
    write (*,*) 'dfftp%nr2 ', dfftp%nr2
    write (*,*) 'dfftp%nr3 ', dfftp%nr3
    write (*,*) 'dffts%nr1 ', dffts%nr1
    write (*,*) 'dffts%nr2 ', dffts%nr2
    write (*,*) 'dffts%nr3 ', dffts%nr3
    
     CALL md5_from_file(vperturb_filename, vf_md5_cksum)
    write (*,*) 'potential files:',TRIM(vperturb_filename),'  MD5 sum:',vf_md5_cksum
    !write (*,*) 'dv readin-vrs', plot_perturb(:)-vrs(:,1)
    !write (*,*) 'dv readin-vrs', vrs(:,1)
    !write (*,*) 'dv readin-vrs', plot_perturb(:)
    !
    !!!!!! vloc.dat read
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
     
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    

    
    allocate(evc3(npwx,nbnd))
    allocate(evc4(npwx,nbnd))
    allocate(mlat2(dfftp%nr3))
    allocate(mlat1(dfftp%nr3))
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!!! eps read 
    iunpot_perturb=99 
    filpot_perturb=eps_filename
    open (unit = iunpot_perturb, file = filpot_perturb, form = 'formatted', &
         status = 'old', err = 99, iostat = ios_perturb)
    
    
    read (iunpot_perturb, '(a)') title_perturb
!    read (iunpot_perturb, * ) k0screen_read
    read (iunpot_perturb, * ) nepslines
    
    allocate(eps_data(2,nepslines))
    do ig= 1, nepslines
         read (iunpot_perturb, * ) eps_data(1,ig),eps_data(2,ig)
    enddo
    write (*,*) 'eps lines  ', nepslines
    write (*,*) 'eps data  ', eps_data(1,1),eps_data(2,1)
    write (*,*) 'eps data  ', eps_data(1,2),eps_data(2,2)
    write (*,*) 'eps data  ', eps_data(1,3),eps_data(2,3)
    write (*,*) 'eps data  ', eps_data(1,7),eps_data(2,7)
    k0screen=k0screen_read
    
     CALL md5_from_file(eps_filename, epsf_md5_cksum)
    write (*,*) 'eps files:',trim(eps_filename),'  MD5 sum:',epsf_md5_cksum
    !write (*,*) 'dv readin-vrs', plot_perturb(:)-vrs(:,1)
    !write (*,*) 'dv readin-vrs', vrs(:,1)
    !write (*,*) 'dv readin-vrs', plot_perturb(:)
    !
    !!!!!! eps read 
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    
    
    
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! CALL h5gn_members_f(file_id, "/mats", nmembers, error)
! write(*,*) "Number of root group member is " , nmembers
! do i = 0, nmembers - 1
!    CALL h5gget_obj_info_idx_f(file_id, "/mats", i, name_buffer, dtype, error)
! write(*,*) trim(name_buffer), dtype
! end do
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!!! gweps read 
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!!!!
! inverse alll dimensions for description
  h5datasetname='/mf_header/crystal/blat'              !f8 
  h5datasetname='/mf_header/crystal/bvec'              !f8 (3,3)

  h5datasetname='/mf_header/gspace/components'         !I4 (ng,3) G pts within cutoff
  h5datasetname='/mf_header/gspace/ng'                 !
  h5datasetname='/mf_header/gspace/FFTgrid'            !i4 (3)
  h5datasetname='/mf_header/gspace/ecutrho'            !
  h5datasetname='/eps_header/gspace/gind_eps2rho'      !i4 (nq,ng)
  h5datasetname='/eps_header/gspace/gind_rho2eps'      !i4 (nq,ng)
  h5datasetname='/eps_header/gspace/nmtx_max'          !i4 
  h5datasetname='/eps_header/gspace/nmtx'              !i4 (nq)  G pts for eps
                                                        
  h5datasetname='/eps_header/gspace/vcoul'             !f8 (nq,nmtx_max)
  h5datasetname='/eps_header/qpoints/nq'               !
  h5datasetname='/eps_header/qpoints/qpts'             !f8 (nq,3)
  h5datasetname='/eps_header/qpoints/qgrid'            !i4 (3)
                                                        
                                                        
  h5datasetname='/mats/matrix'                         !f8 (nq, 1,1, nmtx_max,nmtx_max,2)
  h5datasetname='/mats/matrix-diagonal'                         !f8 (nq, 1,1, nmtx_max,nmtx_max,2)
  !hdf5

h5filename=epsmat_filename


h5datasetname='/mf_header/gspace/ng'      !i4 (nq,ng)
call h5gw_read(h5filename,h5datasetname,h5dataset_data_double,h5dataset_Data_integer,h5dims,h5rank,h5error)
if (h5error<0)  write(*,*)  'h5error',h5error
if (h5rank/=1) then
 write(*,*)  'h5rank error(should be 1)',h5rank 
else
 h5dims1=h5dims
 allocate(gw_ng_data(h5dims1(1)))
 gw_ng_data=reshape(h5dataset_data_integer,h5dims1)
 write(*,*)  'shape h5dataset',shape(h5dataset_data_integer)
 write(*,*)  'ng()',gw_ng_data(:)
 deallocate(h5dims)
 deallocate(h5dataset_Data_integer)
 deallocate(h5dataset_Data_double)
endif


h5datasetname='/eps_header/gspace/nmtx_max'      !i4 (nq,ng)
call h5gw_read(h5filename,h5datasetname,h5dataset_data_double,h5dataset_Data_integer,h5dims,h5rank,h5error)
if (h5error<0)  write(*,*)  'h5error',h5error
if (h5rank/=1) then
 write(*,*)  'h5rank error(should be 1)',h5rank 
else
 h5dims1=h5dims
 allocate(gw_nmtx_max_data(h5dims1(1)))
 gw_nmtx_max_data=reshape(h5dataset_data_integer,h5dims1)
 write(*,*)  'shape h5dataset',shape(h5dataset_data_integer)
 write(*,*)  'nmtx_max()',gw_nmtx_max_data(:)
 deallocate(h5dims)
 deallocate(h5dataset_Data_integer)
 deallocate(h5dataset_Data_double)
endif



h5datasetname='/eps_header/gspace/nmtx'      !i4 (nq,ng)
call h5gw_read(h5filename,h5datasetname,h5dataset_data_double,h5dataset_Data_integer,h5dims,h5rank,h5error)
if (h5error<0)  write(*,*)  'h5error',h5error
if (h5rank/=1) then
 write(*,*)  'h5rank error(should be 1)',h5rank 
else
 h5dims1=h5dims
 allocate(gw_nmtx_data(h5dims1(1)))
 gw_nmtx_data=reshape(h5dataset_data_integer,h5dims1)
 write(*,*)  'shape h5dataset',shape(h5dataset_data_integer)
 write(*,*)  'nmtx()',gw_nmtx_data(:)
 deallocate(h5dims)
 deallocate(h5dataset_Data_integer)
 deallocate(h5dataset_Data_double)
endif



h5datasetname='/eps_header/gspace/gind_eps2rho'      !i4 (nq,ng)
call h5gw_read(h5filename,h5datasetname,h5dataset_data_double,h5dataset_Data_integer,h5dims,h5rank,h5error)
if (h5error<0)  write(*,*)  'h5error',h5error
if (h5rank/=2) then
 write(*,*)  'h5rank error(should be 2)',h5rank 
else
 h5dims2=h5dims
 allocate(gw_gind_eps2rho_data(h5dims2(1),h5dims2(2)))
 gw_gind_eps2rho_data=reshape(h5dataset_data_integer,h5dims2)
 write(*,*)  'shape h5dataset',shape(gw_gind_eps2rho_data)
 write(*,*)  'gw_gind_eps2rho_data()',gw_gind_eps2rho_data(1:100,1)
 deallocate(h5dims)
 deallocate(h5dataset_Data_integer)
 deallocate(h5dataset_Data_double)
endif


h5datasetname='/eps_header/gspace/gind_rho2eps'      !i4 (nq,ng)
call h5gw_read(h5filename,h5datasetname,h5dataset_data_double,h5dataset_Data_integer,h5dims,h5rank,h5error)
if (h5error<0)  write(*,*)  'h5error',h5error
if (h5rank/=2) then
 write(*,*)  'h5rank error(should be 2)',h5rank 
else
 h5dims2=h5dims
 allocate(gw_gind_rho2eps_data(h5dims2(1),h5dims2(2)))
 gw_gind_rho2eps_data=reshape(h5dataset_data_integer,h5dims2)
 write(*,*)  'shape h5dataset',shape(h5dataset_data_integer)
 write(*,*)  'gw_gind_rho2eps_data()',gw_gind_rho2eps_data(1:100,1)
 deallocate(h5dims)
 deallocate(h5dataset_Data_integer)
 deallocate(h5dataset_Data_double)
endif




h5datasetname='/mf_header/gspace/components'               !
call h5gw_read(h5filename,h5datasetname,h5dataset_data_double,h5dataset_Data_integer,h5dims,h5rank,h5error)
if (h5error<0)  write(*,*)  'h5error',h5error
if (h5rank/=2) then
 write(*,*)  'h5rank error(should be 2)',h5rank 
else
 h5dims2=h5dims
 allocate(gw_g_components_data(h5dims2(1),h5dims2(2)))
 gw_g_components_data=reshape(h5dataset_data_integer,h5dims2)
 write(*,*)  'shape h5dataset',shape(h5dataset_data_integer)
 write(*,*)  'gw_g_components_data()',gw_g_components_data(:,1:7)
 deallocate(h5dims)
 deallocate(h5dataset_Data_integer)
 deallocate(h5dataset_Data_double)
endif



h5datasetname='/mf_header/crystal/bvec'               !
call h5gw_read(h5filename,h5datasetname,h5dataset_data_double,h5dataset_Data_integer,h5dims,h5rank,h5error)
if (h5error<0)  write(*,*)  'h5error',h5error
if (h5rank/=2) then
 write(*,*)  'h5rank error(should be 2)',h5rank 
else
 h5dims2=h5dims
 allocate(gw_bvec_data(h5dims2(1),h5dims2(2)))
 gw_bvec_data=reshape(h5dataset_data_double,h5dims2)
 write(*,*)  'shape h5dataset',shape(h5dataset_data_double)
 write(*,*)  'gw_bvec_data()',gw_bvec_data(:,:)
 deallocate(h5dims)
 deallocate(h5dataset_Data_integer)
 deallocate(h5dataset_Data_double)
endif



h5datasetname='/mf_header/crystal/blat'               !
call h5gw_read(h5filename,h5datasetname,h5dataset_data_double,h5dataset_Data_integer,h5dims,h5rank,h5error)
if (h5error<0)  write(*,*)  'h5error',h5error
if (h5rank/=1) then
 write(*,*)  'h5rank error(should be 1)',h5rank 
else
 h5dims1=h5dims
 allocate(gw_blat_data(h5dims1(1)))
 gw_blat_data=reshape(h5dataset_data_double,h5dims1)
 write(*,*)  'shape h5dataset',shape(h5dataset_data_double)
 write(*,*)  'gw_blat_data()',gw_blat_data(:)
 deallocate(h5dims)
 deallocate(h5dataset_Data_integer)
 deallocate(h5dataset_Data_double)
endif




h5datasetname='/eps_header/qpoints/qpts'               !
call h5gw_read(h5filename,h5datasetname,h5dataset_data_double,h5dataset_Data_integer,h5dims,h5rank,h5error)
if (h5error<0)  write(*,*)  'h5error',h5error
if (h5rank/=2) then
 write(*,*)  'h5rank error(should be 2)',h5rank 
else
 h5dims2=h5dims
 allocate(gw_qpts_data(h5dims2(1),h5dims2(2)))
 gw_qpts_data=reshape(h5dataset_data_double,h5dims2)
 write(*,*)  'shape h5dataset',shape(h5dataset_data_double)
 write(*,*)  'gw_qpts_data()',gw_qpts_data(:,:)
 deallocate(h5dims)
 deallocate(h5dataset_Data_integer)
 deallocate(h5dataset_Data_double)
endif



h5datasetname='/eps_header/qpoints/nq'               !
call h5gw_read(h5filename,h5datasetname,h5dataset_data_double,h5dataset_Data_integer,h5dims,h5rank,h5error)
if (h5error<0)  write(*,*)  'h5error',h5error
if (h5rank/=1) then
 write(*,*)  'h5rank error(should be 3)',h5rank 
else
          !      write(*,*) 'sizeof(int(i4b)):',sizeof(gw_nq)
!                write(*,*) 'sizeof(int(i8b)):',sizeof(gw_nqi8)
                write(*,*) 'sizeof(int):',sizeof(h5rank)
 h5dims1=h5dims
 allocate(gw_nq_data(h5dims1(1)))
 gw_nq_data=reshape(h5dataset_data_integer,h5dims1)
 write(*,*)  'shape h5dataset',shape(h5dataset_data_integer)
 write(*,*)  'gw_nq_data()',gw_nq_data(:)
 deallocate(h5dims)
 deallocate(h5dataset_Data_integer)
 deallocate(h5dataset_Data_double)
endif


h5datasetname='/mats/matrix-diagonal'                         !f8 (nq, 1,1, nmtx_max,nmtx_max,2)
call h5gw_read(h5filename,h5datasetname,h5dataset_data_double,h5dataset_Data_integer,h5dims,h5rank,h5error)
if (h5error<0)  write(*,*)  'h5error',h5error
if (h5rank/=3) then
 write(*,*)  'h5rank error(should be 3)',h5rank 
else
 h5dims3=h5dims
 allocate(gw_epsmat_diag_data(h5dims3(1),h5dims3(2),h5dims3(3)))
 gw_epsmat_diag_data=reshape(h5dataset_data_double,h5dims3)
 write(*,*)  'shape h5dataset',shape(h5dataset_data_double)
 write(*,*)  'gw_epsmat_diag_data(:,1,1)',gw_epsmat_diag_data(:,1,:)
 deallocate(h5dims)
 deallocate(h5dataset_Data_integer)
 deallocate(h5dataset_Data_double)
endif

h5datasetname='/mats/matrix'                         !f8 (nq, 1,1, nmtx_max,nmtx_max,2)
call h5gw_read(h5filename,h5datasetname,h5dataset_data_double,h5dataset_Data_integer,h5dims,h5rank,h5error)
if (h5error<0)  write(*,*)  'h5error',h5error
if (h5rank/=6) then
 write(*,*)  'h5rank error(should be 6)',h5rank 
else
 h5dims6=h5dims
 write(*,*)  'hdims',h5dims 
 allocate(gw_epsmat_full_data(h5dims6(1),h5dims6(2),h5dims6(3),h5dims6(4),h5dims6(5),h5dims6(6)))
 gw_epsmat_full_data=reshape(h5dataset_data_double,h5dims6)
 write(*,*)  'shape h5dataset',shape(h5dataset_data_double)
 write(*,*)  'gw_epsmat_full_data(:,1,1)diag',gw_epsmat_full_data(:,1,1,1,1,1)
 write(*,*)  'gw_epsmat_full_data(:,1,1)diag',gw_epsmat_full_data(:,1,1,1,1,2)
 write(*,*)  'gw_epsmat_full_data(:,1,1)diag',gw_epsmat_full_data(:,1,1,1,1,3)
 write(*,*)  'gw_epsmat_full_data(:,1,1)wing',gw_epsmat_full_data(:,1,1,1,1,1)
 write(*,*)  'gw_epsmat_full_data(:,1,1)wing',gw_epsmat_full_data(:,1,2,1,1,1)
 write(*,*)  'gw_epsmat_full_data(:,1,1)wing',gw_epsmat_full_data(:,1,3,1,1,1)
 write(*,*)  'gw_epsmat_full_data(:,1,1)wing',gw_epsmat_full_data(:,1,4,1,1,1)
 write(*,*)  'gw_epsmat_full_data(:,1,1)wing',gw_epsmat_full_data(:,1,5,1,1,1)
 write(*,*)  'gw_epsmat_full_data(:,1,1)wing',gw_epsmat_full_data(:,1,6,1,1,1)
endif


!!!!!!!!!!!!!!!!!!!
! prep read gw h5 data

! qabs
write(*,*) gw_bvec_data(:,1)
write(*,*) gw_bvec_data(:,2)
write(*,*) gw_bvec_data(:,3)
write(*,*) gw_qpts_data(:,1)
write(*,*) gw_qpts_data(:,2)
write(*,*) gw_qpts_data(:,3)

    allocate(gw_qabs(gw_nq_data(1)))
    do ig1 = 1, gw_nq_data(1)
      gw_qabs(ig1)=norm2(&
              gw_qpts_data(1,ig1)*gw_bvec_data(:,1)+ &
              gw_qpts_data(2,ig1)*gw_bvec_data(:,2)+ &
              gw_qpts_data(3,ig1)*gw_bvec_data(:,3))
!*gw_blat_data(1)

!write(*,*)              gw_qpts_data(1,ig1)*gw_bvec_data(1,:)
!write(*,*)              gw_qpts_data(2,ig1)*gw_bvec_data(2,:)
!write(*,*)              gw_qpts_data(3,ig1)*gw_bvec_data(3,:)


!debug
write(*,*)'gw_qabs debug ', gw_qabs(ig1),gw_epsmat_diag_data(:,1,ig1)
!debug
    enddo

!!!!!!!!!!!!!!
!  convert eps(q) g index to common gw-rho based g index
!     gw_q_g_commonsubset_size
!    gw_q_g_commonsubset2rho(:,:)
!    do ig = 1, gw_ng_data(1)
!      do iq=1,gw_nq_data(1)
!        gind_gw_eps=gw_gind_rho2eps_data(iq,ig)
!           if      (gind_gw_eps<gw_nmtx(iq))  then
!      enddo
!    enddo
!eps(gw_gind_rho2eps_data(iq,1:gw_nmtx_data(iq)))

allocate(gw_q_g_commonsubset_indinrho(gw_nmtx_max_data(1)))
gw_q_g_commonsubset_indinrho(:)=0
gw_q_g_commonsubset_indinrho(:)=gw_gind_eps2rho_data(1:gw_nmtx_data(1),1)

!write(*,*)  'gw_q_g_commonsubset_indinrho',gw_q_g_commonsubset_indinrho(1:10),shape(gw_q_g_commonsubset_indinrho)

do iq=1,gw_nq_data(1)
  do ig=1,gw_nmtx_max_data(1)
    if(gw_q_g_commonsubset_indinrho(ig)>0) then
      if (gw_gind_rho2eps_data(gw_q_g_commonsubset_indinrho(ig),iq)>gw_nmtx_data(iq) ) then
         gw_q_g_commonsubset_indinrho(ig)=0
       endif
    endif
  enddo
enddo
!write(*,*)  'gw_q_g_commonsubset_indinrho',gw_q_g_commonsubset_indinrho(:)
ig=0
  do ig1=1,gw_nmtx_max_data(1)
    if(gw_q_g_commonsubset_indinrho(ig1)>0) ig=ig+1
  enddo

write(*,*)  'gw_q_g_commonsubset_indinrho',gw_q_g_commonsubset_indinrho(:)
allocate(gw_q_g_commonsubset_indinrhotmp1(ig))
ig1=1
do ig=1,gw_nmtx_max_data(1)
  if(gw_q_g_commonsubset_indinrho(ig)>0) then 
!     write(*,*) gw_q_g_commonsubset_indinrhotmp1(ig1),gw_q_g_commonsubset_indinrho(ig)
     gw_q_g_commonsubset_indinrhotmp1(ig1)=gw_q_g_commonsubset_indinrho(ig) 
     ig1=ig1+1
  endif
enddo
deallocate(gw_q_g_commonsubset_indinrho)
allocate(gw_q_g_commonsubset_indinrho(size(gw_q_g_commonsubset_indinrhotmp1)))
gw_q_g_commonsubset_indinrho(:)=gw_q_g_commonsubset_indinrhotmp1(:) 

write(*,*)  'gw_q_g_commonsubset_indinrho',gw_q_g_commonsubset_indinrho(:),shape(gw_q_g_commonsubset_indinrho)
gw_q_g_commonsubset_size=size(gw_q_g_commonsubset_indinrho)
!!!!!!!!!!!!!


! prep read gw h5 data
!!!!!!!!!!!!!!!!!!!




!select case( h5rank)
!  case (1)
!h5dims3=h5dims
!allocate(gw_eps0mat_diag_data(h5dims3(1),h5dims3(2),h5dims3(3)))
!gw_eps0mat_diag_data=reshape(h5dataset_data,h5dims3)
!  case default
!  write(*,*) 'h5 read error'
!end select 


!!!!!!!!!!!!!!!!!!!!!!!
!!md5sum not working for non-text files
!    CALL md5_from_file('t.tgz',epsmatf_md5_cksum)
!    write (*,*) 'GW epsmat files:',trim(eps0mat_filename),'  MD5 sum:',epsmatf_md5_cksum
!    CALL md5_from_file('t1.tgz',epsmatf_md5_cksum)
!    write (*,*) 'GW epsmat files:',trim(eps0mat_filename),'  MD5 sum:',epsmatf_md5_cksum
!
!    CALL md5_from_file('eps0mat.10-epsilon_subsampling-cutoff10.h5',epsmatf_md5_cksum)
!    write (*,*) 'GW epsmat files:',trim(eps0mat_filename),'  MD5 sum:',epsmatf_md5_cksum
!    CALL md5_from_file(eps0mat_filename, epsmatf_md5_cksum)
!    write (*,*) 'GW epsmat files:',trim(eps0mat_filename),'  MD5 sum:',epsmatf_md5_cksum
!    CALL md5_from_file(epsmat_filename, epsmatf_md5_cksum)
!    write (*,*) 'GW epsmat files:',trim(epsmat_filename),'  MD5 sum:',epsmatf_md5_cksum
!!!!!!!!!!!!!!!!!!!!!!!

    !
    !!!!!! gweps read 
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    
    
    
    
    
    
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!!!!!!!!eloc from rho*vloc
    mnl=0
    DO ig = 1, dffts%nnr
       mnl=mnl+rho%of_r(ig,1)
    ENDDO
    write(*,*) 'rhotot',mnl, ml/mnl*8
    
    ml=0
    auxr(:) =  vltot(:)
    DO ig = 1, dffts%nnr
       ml=ml+rho%of_r(ig,1)*auxr(ig)
    ENDDO
    write(*,*) 'el=rho*vltot', ml
    
    ml=0
    auxr(:) = v%of_r(:,1) 
    DO ig = 1, dffts%nnr
       ml=ml+rho%of_r(ig,1)*auxr(ig)
    ENDDO
    write(*,*) 'el=rho*v%of_r', ml
    
    ml=0
    auxr(:) = vrs(:,1)
    DO ig = 1, dffts%nnr
       ml=ml+rho%of_r(ig,1)*auxr(ig)
    ENDDO
    write(*,*) 'el=rho*vrs', ml
    !!!!!!!!!!!eloc from rho*vloc
    
    
    
    !allocate(evc1(size(evc)/nbnd,nbnd))
    !allocate(evc2(size(evc)/nbnd,nbnd))
    !write (*,*) 'npwx,npw',npwx,npw
    allocate(evc1(npwx,nbnd))
    allocate(evc2(npwx,nbnd))
    allocate(psic1(dfftp%nnr))
    allocate(psic2(dfftp%nnr))
    
       
    
    
!    tau_perturb(1,:)=tau_perturb(1,:)-(at(1,1)+at(2,1)+at(3,1))*1.4
!    tau_perturb(2,:)=tau_perturb(2,:)-(at(1,2)+at(2,2)+at(3,2))*1.4
!    tau(1,:)=tau(1,:)-(at(1,1)+at(2,1)+at(3,1))*1.0
!    tau(2,:)=tau(2,:)-(at(1,2)+at(2,2)+at(3,2))*1.0
!    do ig=1,nat_perturb
!    write (*,*) 'tau_perturb, ', shape(tau_perturb),tau_perturb(:,ig)
!    enddo

    
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    ! loop through k points
    write (*,*) 'start M calculation k loop'
!    write (*,*) 'xk',xk,nk
    ibnd0=bnd_initial
    ibnd=bnd_final
    write (*,*) 'ibnd0->ibnd:',ibnd0,ibnd
    DO ik0=kpoint_initial,kpoint_final
     DO ik = 1, nk
      DO ispin = 1, nspin
        ikk = ik + nk*(ispin-1)
        ikk0 = ik0 + nk*(ispin-1)
        !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        !ml=0
        !write (*,*) 'evc read',ik
        
        !IF( nks > 1 ) CALL get_buffer (evc, nwordwfc, iunwfc, ik )
        !         write(*,*) 'npw,npwx,ngk(ik0),ngk(ikk)',npw,npwx,ngk(ik0),ngk(ikk)
        !npw = ngk(ik)
        !         write(*,*) 'npw,npwx,ngk(ik0),ngk(ikk)',npw,npwx,ngk(ik0),ngk(ikk)
        !            CALL init_us_2 (npw, igk_k(1,ik), xk (1, ik), vkb)
        !            CALL calbec ( npw, vkb, evc, becp )
        
        !write (*,*) 'evc2 read',ik
        !CALL get_buffer ( evc2, nwordwfc, iunwfc, ik )
        !write (*,*) 'evc1 read',ik0
        !CALL get_buffer ( evc1, nwordwfc, iunwfc, ik0 )
        !!!!!!!!!!!!write (*,*) "size evc evc1:" , size(evc),size(evc1)
        !!!!!!!!!!!!!!! evc
        
        
        !write(*,*) 'evc1', evc1(1:10,10)
        !write(*,*) 'evc2', evc2(1:10,10)
!    write (*,*) 'ik',ikk0,ikk
!    write(*,*) 'xk,xk0,xk-xk01',xk(1,ik),xk(1,ik0),xk(1,ik)-xk(1,ik0)
!    write(*,*) 'xk,xk0,xk-xk02',xk(2,ik),xk(2,ik0),xk(2,ik)-xk(2,ik0)
!    write(*,*) 'xk,xk0,xk-xk03',xk(3,ik),xk(3,ik0),xk(3,ik)-xk(3,ik0)
        CALL get_buffer ( evc2, nwordwfc, iunwfc, ikk )
        CALL get_buffer ( evc1, nwordwfc, iunwfc, ikk0 )
    
        if (calcmlocal) then
         call calcmdefect_ml_rs(ibnd0,ibnd,ikk0,ikk)
         !call calcmdefect_ml_rd(ibnd0,ibnd,ikk0,ikk)
         !call calcmdefect_ml_ks(ibnd0,ibnd,ikk0,ikk)
         !call calcmdefect_ml_kd(ibnd0,ibnd,ikk0,ikk)
        endif
        if (calcmnonlocal) then
         call calcmdefect_mnl_ks(ibnd0,ibnd,ikk0,ikk)
         !call calcmdefect_mnl_kd(ibnd0,ibnd,ikk0,ikk)
         !call calcmdefect_mnl_rs(ibnd0,ibnd,ikk0,ikk)
         !call calcmdefect_mnl_rd(ibnd0,ibnd,ikk0,ikk)
        endif
        if (calcmcharge) then
         !call calcmdefect_charge(ibnd0,ibnd,ikk0,ikk)

         if (mcharge_dolfa) then
         call calcmdefect_charge_lfa(ibnd0,ibnd,ik0,ik)
         !!call calcmdefect_charge_2dlfa(ibnd0,ibnd,ikk0,ikk)
         !!call calcmdefect_charge_3dlfa(ibnd0,ibnd,ikk0,ikk)
         !!call calcmdefect_charge_qehlfa(ibnd0,ibnd,ikk0,ikk)
         else
         call calcmdefect_charge_nolfa(ibnd0,ibnd,ik0,ik)
         !!call calcmdefect_charge_2dnolfa(ibnd0,ibnd,ikk0,ikk)
         !!call calcmdefect_charge_3dnolfa(ibnd0,ibnd,ikk0,ikk)
         !!call calcmdefect_charge_qehnolfa(ibnd0,ibnd,ikk0,ikk)
         endif
        endif
    
    
      enddo
     enddo
    enddo
    
    END SUBROUTINE calcmdefect_all

    
    SUBROUTINE calcmdefect_noncolin()

      type(V_file) :: V_0, Bxc_1, Bxc_2, Bxc_3, V_p
      real(DP),allocatable ::  V_loc(:,:)

      write(*,"(//A/)") 'Enter calcmdefect_noncolin module '

!      write(*,*) eband
!      write(*,*) deband
!      write(*,*) demet
!      write(*,*) ewld
!      write(*,*) etxcc
!      write(*,*) etxc
!      write(*,*) ehart
!
!      ALLOCATE (idx (ngm) )
!      ALLOCATE (igtog (ngm) )
!      ALLOCATE (gtoig (ngm) )
!      idx(:) = 0
!      igtog(:) = 0
!      !IF( lsda )THEN
!       !  nbndup = nbnd
!       !  nbnddown = nbnd
!       !  nk = nks/2
!       !     nspin = 2
!      !ELSE
!       !  nbndup = nbnd
!       !  nbnddown = 0
!      nk = nks
!       !     nspin = 1
!      !ENDIF
!
!
!    
!      DO ik = 1, nk
!         ikk = ik
!         idx( igk_k(1:ngk(ikk),ikk) ) = 1
!      ENDDO
!   
!
!      ngtot_l = 0
!      DO ig = 1, ngm
!         IF( idx(ig) >= 1 )THEN
!            ngtot_l = ngtot_l + 1
!            igtog(ngtot_l) = ig
!            gtoig(ig) = ngtot_l
!         ENDIF
!      ENDDO
!
!
    ALLOCATE (aux(dfftp%nnr))
    ALLOCATE(auxr(dfftp%nnr))
    ALLOCATE(psiprod(dfftp%nnr))
    ALLOCATE(vgk(dfftp%nnr))
    ALLOCATE(vgk_perturb(dfftp%nnr))
    ALLOCATE( auxg( dfftp%ngm ) )
!
!      
!      OPEN(unit=tmp_unit,file = 'calcmdefect.dat',status='old',err=20)
!      20 continue
!         READ(tmp_unit,calcmcontrol,iostat=ios)
!      CLOSE(tmp_unit)
!      
      

      V_0%filename = V_0_filename
      Bxc_1%filename = Bxc_1_filename
      Bxc_2%filename = Bxc_2_filename
      Bxc_3%filename = Bxc_3_filename
      V_p%filename = V_p_filename

      call read_perturb_file(V_0)
     ! call read_perturb_file(Bxc_1)
     ! call read_perturb_file(Bxc_2)
      call read_perturb_file(Bxc_3)
      call read_perturb_file(V_p)
      
      allocate(V_loc ( V_0%nr1*V_0%nr2*V_0%nr3, 2))
      
      call get_vloc_colin(V_0, Bxc_3, V_loc)

      allocate(evc1(2*npwx,nbnd))
      allocate(evc2(2*npwx,nbnd))
      !allocate(evc3(2*npwx,nbnd))
      !allocate(evc4(2*npwx,nbnd))
      allocate(psic1(dfftp%nnr))
      allocate(psic2(dfftp%nnr))
      allocate(psic3(dfftp%nnr))
      allocate(psic4(dfftp%nnr))


      ! loop through k points
      write (*,"(/A/)") ' start M calculation k loop'
      ibnd0=bnd_initial
      ibnd=bnd_final
  !    do ibnd0 = bnd_initial, bnd_final
   !      ibnd=ibnd0
         DO ik0=kpoint_initial,kpoint_final
            DO ik = 1, nk
               
               ikk = ik 
               ikk0 = ik0 
         
               CALL get_buffer ( evc2, nwordwfc, iunwfc, ikk )
               CALL get_buffer ( evc1, nwordwfc, iunwfc, ikk0 )

            ! write(*,*) evc1(11:15, 27)/evc1(11+npwx:15+npwx, 27)
            ! write(*,*) evc1(11+npwx:15+npwx, 27)
            ! write(*,*) evc1(2*npwx-3:2*npwx+3, 27)
      
               if (calcmlocal) then
                  call calcmdefect_ml_rs_noncolin(ibnd0,ibnd,ikk0,ikk, V_0, V_loc)
               endif
               if (calcmnonlocal) then
                  call calcmdefect_mnl_ks_noncolin(ibnd0,ibnd,ikk0,ikk, V_0, V_p)
               endif

      1003 format(A24,I6,I6,A6,I6,I6 " ( ",e17.9," , ",e17.9," ) ",e17.9//)
   !  write (stdout,1003) 'M_tot ni ki --> nf kf ', ibnd0,ikk0, '-->', ibnd,ikk, mnl_d-mnl_p+ml_up+ml_down, abs(mnl_d-mnl_p+ml_up+ml_down)
      write (stdout,1003) 'M_tot ni ki --> nf kf ', ibnd0,ikk0, '-->', ibnd,ikk, mnl_d+ml_up+ml_down, abs(mnl_d+ml_up+ml_down)
            enddo
         enddo 
    ! enddo
    END SUBROUTINE calcmdefect_noncolin



   subroutine calcmdefect_soc()

      type(V_file) :: V_0, Bxc_1, Bxc_2, Bxc_3, V_p
      real(DP),allocatable ::  V_loc(:,:)
      complex(DP) :: ek, ek_tot
      integer  :: jj

      write(*,"(//A/)") 'Enter calcmdefect_soc module '

!      write(*,*) eband
!      write(*,*) deband
!      write(*,*) demet
!      write(*,*) ewld
!      write(*,*) etxcc
!      write(*,*) etxc
!      write(*,*) ehart
!
!      ALLOCATE (idx (ngm) )
!      ALLOCATE (igtog (ngm) )
!      ALLOCATE (gtoig (ngm) )
!      idx(:) = 0
!      igtog(:) = 0
!      !IF( lsda )THEN
!       !  nbndup = nbnd
!       !  nbnddown = nbnd
!       !  nk = nks/2
!       !     nspin = 2
!      !ELSE
!       !  nbndup = nbnd
!       !  nbnddown = 0
!      nk = nks
!       !     nspin = 1
!      !ENDIF
!
!
!    
!      DO ik = 1, nk
!         ikk = ik
!         idx( igk_k(1:ngk(ikk),ikk) ) = 1
!      ENDDO
!   
!
!      ngtot_l = 0
!      DO ig = 1, ngm
!         IF( idx(ig) >= 1 )THEN
!            ngtot_l = ngtot_l + 1
!            igtog(ngtot_l) = ig
!            gtoig(ig) = ngtot_l
!         ENDIF
!      ENDDO
!    !extra function: not fully implemented
!    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!
!
!      ALLOCATE (aux(dfftp%nnr))
!      ALLOCATE(auxr(dfftp%nnr))
!      ALLOCATE(psiprod(dfftp%nnr))
!      ALLOCATE(vgk(dfftp%nnr))
!      ALLOCATE(vgk_perturb(dfftp%nnr))
!      ALLOCATE( auxg( dfftp%ngm ) )
!
!
!      OPEN(unit=tmp_unit,file = 'calcmdefect.dat',status='old',err=20)
!      20 continue
!         READ(tmp_unit,calcmcontrol,iostat=ios)
!      CLOSE(tmp_unit)


      V_0%filename = V_0_filename
      Bxc_1%filename = Bxc_1_filename
      Bxc_2%filename = Bxc_2_filename
      Bxc_3%filename = Bxc_3_filename
      V_p%filename = V_p_filename

      call read_perturb_file(V_0)
     ! call read_perturb_file(Bxc_1)
     ! call read_perturb_file(Bxc_2)
      call read_perturb_file(Bxc_3)
      call read_perturb_file(V_p)

      allocate(V_loc ( V_0%nr1*V_0%nr2*V_0%nr3, 2))
      
      call get_vloc_colin(V_0, Bxc_3, V_loc)

      allocate(evc1(2*npwx,nbnd))
      allocate(evc2(2*npwx,nbnd))

      allocate(psic1(dfftp%nnr))
      allocate(psic2(dfftp%nnr))
      allocate(psic3(dfftp%nnr))
      allocate(psic4(dfftp%nnr))

      ! loop through k points
      write (*,"(/A/)") ' start M calculation k loop'
      ibnd0=bnd_initial
      ibnd=bnd_final
      
   !do ibnd0 = bnd_initial, bnd_final
   !   ibnd=ibnd0
      DO ik0=kpoint_initial,kpoint_final
         
         DO ik = 1, nk
            
            ikk = ik 
            ikk0 = ik0
            call g2_kin(ikk)
            !write(*,*) ik
            !write(*,*) g2kin
        
            CALL get_buffer ( evc2, nwordwfc, iunwfc, ikk )
            CALL get_buffer ( evc1, nwordwfc, iunwfc, ikk0 )

            !write(*,*) evc2(:,ibnd)
        !    ek = 0.d0
            
        !    do jj = 1, npwx
        !       ek = ek + conjg(evc2(jj,ibnd)) * evc2(jj,ibnd) *g2kin(jj) * wg(ibnd, ikk)&
        !          + conjg(evc2(jj+npwx,ibnd)) * evc2(jj+npwx,ibnd)*g2kin(jj)*wg(ibnd, ikk)
               !write(*,*) ek
        !    enddo
            
        !    ek_tot = ek_tot + ek
        !    write(*,*) 'E kinetic:' , ek
        !    write(*,*) 'E kinetic tot:' , ek_tot


            if (calcmlocal) then
               call calcmdefect_ml_rs_noncolin(ibnd0,ibnd,ikk0,ikk, V_0, V_loc)
            endif
            if (calcmnonlocal) then
               call calcmdefect_mnl_ks_soc(ibnd0,ibnd,ikk0,ikk, V_0, V_p)
            endif
      1003 format(A24,I6,I6,A6,I6,I6 " ( ",e17.9," , ",e17.9," ) ",e17.9//)
      !write (stdout,1003) 'M_tot ni ki --> nf kf ', ibnd0,ikk0, '-->', ibnd,ikk, mnl_d-mnl_p+ml_up+ml_down, abs(mnl_d-mnl_p+ml_up+ml_down)
      write (stdout,1003) 'M_tot ni ki --> nf kf ', ibnd0,ikk0, '-->', ibnd,ikk, mnl_d+ml_up+ml_down, abs(mnl_d+ml_up+ml_down)
         ENDDO
      ENDDO
   !enddo
   end subroutine calcmdefect_soc





    SUBROUTINE calcmdefect_ml_rd(ibnd0,ibnd,ik0,ik)
    !USE cell_base,       ONLY : alat, ibrav, omega, at, bg, celldm, wmass
    INTEGER :: ibnd, ik, ik0,ibnd0
    auxr(:) =  vrs(:,1)
    ml=0
    mltot=0
    psic2(1:dffts%nnr) = (0.d0,0.d0)
    psic1(1:dffts%nnr) = (0.d0,0.d0)
    DO ig = 1, ngk(ik)
       psic2 (dffts%nl (igk_k(ig,ik) ) ) = evc2 (ig, ibnd)
    ENDDO
    DO ig = 1, ngk(ik0)
       psic1 (dffts%nl (igk_k(ig,ik0) ) ) = evc1 (ig, ibnd0)
    ENDDO
    !psicnorm=0
    !                 DO ig = 1, dffts%nnr
    !                     enl1=(log((psic1(ig))/psic2(ig)))
    !                   write(*,*) 'psi element product, ratio,', (enl1)
    !                 ENDDO
    psiprod(:)=psic1(:)
    CALL invfft ('Wave', psic2, dffts)
    CALL invfft ('Wave', psic1, dffts)
    
    !                 CALL fwfft ('Wave', psic1, dffts)
    !write(*,*) 'evc-ffpevc',sum(abs(psic1(:)-psiprod(:)))
    !write(*,*) 'evc',psiprod(:)
    !write(*,*) 'ffpevc',psic1(:)
    !                 CALL invfft ('Wave', psic1, dffts)
    
    !write(*,*) 'psic1', psic1(1:3)
    !write(*,*) 'pevc1:phases', AIMAG(LOG(psic1(1)))
    !write(*,*) 'pevc1:phases', AIMAG(LOG(psic1(2)))
    !write(*,*) 'pevc1:phases', AIMAG(LOG(psic1(3)))
    !write(*,*) 'pevc1:phases', AIMAG(LOG(psic1(4)))
    !write(*,*) 'pevc1:phases', AIMAG(LOG(psic1(5)))
    !write(*,*) 'pevc1:phases', AIMAG(LOG(psic1(6)))
    !write(*,*) at(:,1)
    !write(*,*) at(:,2)
    !write(*,*) at(:,3)
    !write(*,*) 't'
    !!write(*,*) 'arg',    2*3.141592653*(irx/dffts%nr1*at(1,1)+iry/dffts%nr2*at(1,2)+irz/dffts%nr3*at(1,3))*xk(1,ik)   
    !!write(*,*) 'arg',    2*3.141592653*(irx/dffts%nr1*at(2,1)+iry/dffts%nr2*at(2,2)+irz/dffts%nr3*at(2,3))*xk(2,ik)   
    !!write(*,*) 'arg',    2*3.141592653*(irx/dffts%nr1*at(3,1)+iry/dffts%nr2*at(3,2)+irz/dffts%nr3*at(3,3))*xk(3,ik)   
    !    CALL fft_index_to_3d (21, dffts, irx,iry,irz, offrange)
    !arg=2*3.141592653*(real(irx)/dffts%nr1*at(1,1)+real(iry)/dffts%nr2*at(1,2)+real(irz)/dffts%nr3*at(1,3))*xk(1,ik) +&
    !    2*3.141592653*(real(irx)/dffts%nr1*at(2,1)+real(iry)/dffts%nr2*at(2,2)+real(irz)/dffts%nr3*at(2,3))*xk(2,ik) +&
    !    2*3.141592653*(real(irx)/dffts%nr1*at(3,1)+real(iry)/dffts%nr2*at(3,2)+real(irz)/dffts%nr3*at(3,3))*xk(3,ik)   
    !write(*,*) 'ir', irx,iry,irz, arg
    !    CALL fft_index_to_3d (22, dffts, irx,iry,irz, offrange)
    !arg=2*3.141592653*(real(irx)/dffts%nr1*at(1,1)+real(iry)/dffts%nr2*at(1,2)+real(irz)/dffts%nr3*at(1,3))*xk(1,ik) +&
    !    2*3.141592653*(real(irx)/dffts%nr1*at(2,1)+real(iry)/dffts%nr2*at(2,2)+real(irz)/dffts%nr3*at(2,3))*xk(2,ik) +&
    !    2*3.141592653*(real(irx)/dffts%nr1*at(3,1)+real(iry)/dffts%nr2*at(3,2)+real(irz)/dffts%nr3*at(3,3))*xk(3,ik)   
    !write(*,*) 'ir', irx,iry,irz, arg
    !    CALL fft_index_to_3d (23, dffts, irx,iry,irz, offrange)
    !arg=2*3.141592653*(real(irx)/dffts%nr1*at(1,1)+real(iry)/dffts%nr2*at(1,2)+real(irz)/dffts%nr3*at(1,3))*xk(1,ik) +&
    !    2*3.141592653*(real(irx)/dffts%nr1*at(2,1)+real(iry)/dffts%nr2*at(2,2)+real(irz)/dffts%nr3*at(2,3))*xk(2,ik) +&
    !    2*3.141592653*(real(irx)/dffts%nr1*at(3,1)+real(iry)/dffts%nr2*at(3,2)+real(irz)/dffts%nr3*at(3,3))*xk(3,ik)   
    !write(*,*) 'ir', irx,iry,irz, arg
    !
    !write(*,*) 'arg', (real(irx)/dffts%nr1*at(1,1)+real(iry)/dffts%nr2*at(1,2)+real(irz)/dffts%nr3*at(1,3))*xk(1,ik) 
    !write(*,*) 'arg', (real(irx)/dffts%nr1*at(2,1)+real(iry)/dffts%nr2*at(2,2)+real(irz)/dffts%nr3*at(2,3))*xk(2,ik) 
    !write(*,*) 'arg', (real(irx)/dffts%nr1*at(3,1)+real(iry)/dffts%nr2*at(3,2)+real(irz)/dffts%nr3*at(3,3))*xk(3,ik)   
    !write(*,*) 'pevc2:phases', AIMAG(LOG(psic2(1)))
    !write(*,*) 'pevc2:phases', AIMAG(LOG(psic2(2)))
    !write(*,*) 'pevc2:phases', AIMAG(LOG(psic2(3)))
    
    !write(*,*) 'psic1', psic1(1:2)
    !write(*,*) 'xk(ik)', xk(:,ik),ik
    !write(*,*) 'at', at
    !write(*,*) 'evcprod', mltot
    !mltot=0
    !psicnorm=0
    d1=((1.0/dffts%nr1*at(1,1))*(xk(1,ik)-xk(1,ik0)) +&
        (1.0/dffts%nr1*at(2,1))*(xk(2,ik)-xk(2,ik0)) +&
        (1.0/dffts%nr1*at(3,1))*(xk(3,ik)-xk(3,ik0)) )*tpi 
    d2=((1.0/dffts%nr2*at(1,2))*(xk(1,ik)-xk(1,ik0)) +&
        (1.0/dffts%nr2*at(2,2))*(xk(2,ik)-xk(2,ik0)) +&
        (1.0/dffts%nr2*at(3,2))*(xk(3,ik)-xk(3,ik0)) )*tpi 
    d3=((1.0/dffts%nr3*at(1,3))*(xk(1,ik)-xk(1,ik0)) +&
        (1.0/dffts%nr3*at(2,3))*(xk(2,ik)-xk(2,ik0)) +&
        (1.0/dffts%nr3*at(3,3))*(xk(3,ik)-xk(3,ik0)) )*tpi 
    
    
    ml=0
    psicprod=0.0
    DO ig = 1, dffts%nnr
        CALL fft_index_to_3d (ig, dffts, irx,iry,irz, offrange)
    !write(*,*)'xyz,ig', irx,iry,irz,ig
    !write(*,*)'nrxyz', dffts%nr1,dffts%nr2,dffts%nr3
    !write(*,*)'k', xk(1:3,ik)
    ! write(*,*) 'arg x',   irx*2*3.141592653/dffts%nr1*xk(1,ik) 
    ! write(*,*) 'arg y',   iry*2*3.141592653/dffts%nr2*xk(2,ik) 
    ! write(*,*) 'arg z',   irz*2*3.141592653/dffts%nr3*xk(3,ik) 
    
    
    
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1
    !!!!!!arg=(k-k0)*r
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1
    arg=tpi*(real(irx)/dffts%nr1*at(1,1)+real(iry)/dffts%nr2*at(1,2)+real(irz)/dffts%nr3*at(1,3))*(xk(1,ik)-xk(1,ik0)) +&
        tpi*(real(irx)/dffts%nr1*at(2,1)+real(iry)/dffts%nr2*at(2,2)+real(irz)/dffts%nr3*at(2,3))*(xk(2,ik)-xk(2,ik0)) +&
        tpi*(real(irx)/dffts%nr1*at(3,1)+real(iry)/dffts%nr2*at(3,2)+real(irz)/dffts%nr3*at(3,3))*(xk(3,ik)-xk(3,ik0))   
    
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    ! shift arg center
    arg=irz*d3+(iry-iry/(dffts%nr2/2+1)*dffts%nr1)*d2+(irx-irx/(dffts%nr1/2+1)*dffts%nr1)*d1
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


    !arg=-arg/alat
    !arg=irx*2*3.141592653/dffts%nr1*xk(1,ik) +&
    !    iry*2*3.141592653/dffts%nr2*xk(2,ik) +&
    !    irz*2*3.141592653/dffts%nr3*xk(3,ik) 
    !arg=-arg
    phase=CMPLX(COS(arg),SIN(arg),kind=dp)
    !phase=1
    !write (*,*) 'arg, phase', arg,phase
                          ml=ml+CONJG(psic1(ig))*psic2(ig)*auxr(ig)*phase
                          psicprod=psicprod+CONJG(psic1(ig))*psic2(ig)*phase
    !                     enl1=(log((psic1(ig))/psic2(ig)))
                      !if ((ik .eq. 2 .or. ik .eq.1 .or. ik.eq.14 ).and. ibnd .eq. 1) write(*,*) mltot, (enl1), arg, (arg-0.145)-(enl1)
    !                  if ((ik .eq. 4 .or. ik .eq.5 .or. ik.eq.14 ).and. ibnd .eq. 1) write(*,*) mltot
    !                   write(*,*) mltot, (enl1), arg, (arg-0.145)-(enl1)
    !                   write(*,*) 'psi element product, ratio, ikr, ratio-ikr:', (enl1), arg, (arg)-aimag(enl1)
    
    !                   write(*,*) 'psi ', psic1(ig),psic2(ig),psic1(ig)/psic2(ig),enl1
    !                  if ((ik .eq. 4 .or. ik .eq.5 .or. ik.eq.14 ).and. ibnd .eq. 1) write(*,*) mltot
    !psicnorm=psicnorm+CONJG(psic(ig))*psic(ig)
    !if (irz==dffts%nr3/2) then
    !write(*,*) 'psiplt ik',ik, 'xyz', irx,iry,irz,  'psi1', psic1(ig),abs( psic1(ig)),  'psi2', psic2(ig),abs(psic2(ig)),&
    !           'arg', arg,'prod', CONJG(psic1(ig))*psic2(ig)*phase, abs(CONJG(psic1(ig))*psic2(ig)*phase)
    !endif


    ENDDO
    ml=ml/dffts%nnr
    psicprod=psicprod/dffts%nnr
    write(*,*) 'psicprodd', psicprod , abs(psicprod)

    !mltot=0
                    !
    !                IF ( ibnd < ibnd_end ) THEN
    !                   !
    !                   ! ... two ffts at the same time
    !                   !
    !                   psic(dffts%nl(1:npw))  = evc(1:npw,ibnd) + &
    !                                           ( 0.D0, 1.D0 ) * evc(1:npw,ibnd+1)
    !                   psic(dffts%nlm(1:npw)) = CONJG( evc(1:npw,ibnd) - &
    !                                           ( 0.D0, 1.D0 ) * evc(1:npw,ibnd+1) )
    !                   !
    !                ELSE
    !                   !
    !                   psic(dffts%nl (1:npw))  = evc(1:npw,ibnd)
    !                   psic(dffts%nlm(1:npw)) = CONJG( evc(1:npw,ibnd) )
    !                   !
    !                END IF
                    !
                       !psic(dffts%nl(1:npw))  = evc(1:npw,ibnd) + &
    !              DO j = 1, dfftp%nnr
    !                  IF(gamma_only)THEN !.and.j>1)then
    !                     ml = ml +  conjg(psic(j,ibnd)) * evc(j,ibnd) * &
    !                                    auxg(j)
    !                  ELSE
    !                     ml = ml +  conjg(evc(j,ibnd)) * evc(j,ibnd) * &
    !                                    auxg(j)
    !                  ENDIF
    !               ENDDO
    !*wg(ibnd,ik)
    !if(ibnd .eq. 9) 
    !write (*,*) 'omega: ', omega
    !write (*,*) 'vrs-vofr ',  vrs(:,1)- v%of_r(:,1) - vltot(:)
    !arg=aimag(log(ml))
    mltot1=mltot1+ml*wg(ibnd,ik)!
    !write (stdout,*) 'ml: ik0, ik, ibnd0, ibnd: ', ik0, ik, ibnd0, ibnd, 'ml', ml , abs(ml),log(ml)!, arg, 'mltot', mltot1
    !write (stdout,*) 'modml original, ik0->ik:', ik0, ik, abs(ml)
    !write (stdout,*) 'psiprodphase original ', mltot
    !write (stdout,*) 'mltot ', mltot1
    write (*,*) 'mlrd ki->kf ',ik0,ik, ml, abs(ml)
    !arg=0
    !write (stdout,*) 'size evc auxg auxr: ', size(evc),size(auxg),size(auxr)
    !!!! Vl real space direct
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    END SUBROUTINE calcmdefect_ml_rd
     
    SUBROUTINE calcmdefect_ml_rs(ibnd0,ibnd,ik0,ik)
    USE cell_base,       ONLY : alat, ibrav, omega, at, bg, celldm, wmass
    INTEGER :: ibnd, ik, ik0,ibnd0
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !ml=0
    
    !            IF( nks > 1 ) CALL get_buffer (evc, nwordwfc, iunwfc, ik )
    
    !     npw = ngk(ik)
    !            CALL init_us_2 (npw, igk_k(1,ik), xk (1, ik), vkb)
    !            CALL calbec ( npw, vkb, evc, becp )
    
    !        CALL get_buffer ( evc1, nwordwfc, iunwfc, ik0 )
    !        CALL get_buffer ( evc2, nwordwfc, iunwfc, ik )
    !!!!!!!!!!!!write (*,*) "size evc evc1:" , size(evc),size(evc1)
    !!!!!!!!!!!!!!! evc
    
    
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!!! vl in real super2prim, module
    auxr(:) =  vrs(:,1)
    psiprod(:)=0.00
    vgk_perturb(:)=0.00
    ml=0
    psicprod=0
    psicprod1=0
    !mltot=0
    !mltot1=0
    d1=((1.0/dffts%nr1*at(1,1))*(xk(1,ik)-xk(1,ik0)) +&
        (1.0/dffts%nr1*at(2,1))*(xk(2,ik)-xk(2,ik0)) +&
        (1.0/dffts%nr1*at(3,1))*(xk(3,ik)-xk(3,ik0)) )*tpi 
    d2=((1.0/dffts%nr2*at(1,2))*(xk(1,ik)-xk(1,ik0)) +&
        (1.0/dffts%nr2*at(2,2))*(xk(2,ik)-xk(2,ik0)) +&
        (1.0/dffts%nr2*at(3,2))*(xk(3,ik)-xk(3,ik0)) )*tpi 
    d3=((1.0/dffts%nr3*at(1,3))*(xk(1,ik)-xk(1,ik0)) +&
        (1.0/dffts%nr3*at(2,3))*(xk(2,ik)-xk(2,ik0)) +&
        (1.0/dffts%nr3*at(3,3))*(xk(3,ik)-xk(3,ik0)) )*tpi 
    
    psic2(1:dffts%nnr) = (0.d0,0.d0)
    psic1(1:dffts%nnr) = (0.d0,0.d0)
    DO ig = 1, ngk(ikk)
       psic2 (dffts%nl (igk_k(ig,ikk) ) ) = evc2 (ig, ibnd)
    ENDDO
    DO ig = 1, ngk(ik0)
       psic1 (dffts%nl (igk_k(ig,ik0) ) ) = evc1 (ig, ibnd0)
    ENDDO
    CALL invfft ('Wave', psic2, dffts)
    CALL invfft ('Wave', psic1, dffts)
    
    
    
    !d1=((1.0/nr1_perturb*at_perturb(1,1))*(xk(1,ik)-xk(1,ik0)) +&
    !    (1.0/nr1_perturb*at_perturb(2,1))*(xk(2,ik)-xk(2,ik0)) +&
    !    (1.0/nr1_perturb*at_perturb(3,1))*(xk(3,ik)-xk(3,ik0)) )*tpi 
    !d2=((1.0/nr2_perturb*at_perturb(1,2))*(xk(1,ik)-xk(1,ik0)) +&
    !    (1.0/nr2_perturb*at_perturb(2,2))*(xk(2,ik)-xk(2,ik0)) +&
    !    (1.0/nr2_perturb*at_perturb(3,2))*(xk(3,ik)-xk(3,ik0)) )*tpi 
    !d3=((1.0/nr3_perturb*at_perturb(1,3))*(xk(1,ik)-xk(1,ik0)) +&
    !    (1.0/nr3_perturb*at_perturb(2,3))*(xk(2,ik)-xk(2,ik0)) +&
    !    (1.0/nr3_perturb*at_perturb(3,3))*(xk(3,ik)-xk(3,ik0)) )*tpi 
    !
    arg=0
    inr=0
!    write(*,*) 'xk-xk01',xk(1,ik)-xk(1,ik0)
!    write(*,*) 'xk-xk02',xk(2,ik)-xk(2,ik0)
!    write(*,*) 'xk-xk03',xk(3,ik)-xk(3,ik0)
    do irz =0, nr3_perturb-1
    ir3mod=irz-(irz/(dffts%nr3))*dffts%nr3
    do iry =0, nr2_perturb-1
    ir2mod=iry-(iry/(dffts%nr2))*dffts%nr2
    do irx =0, nr1_perturb-1
    ir1mod=irx-(irx/(dffts%nr1))*dffts%nr1
    !arg=tpi*(real(irx)/nr1_perturb*at_perturb(1,1)+real(iry)/nr2_perturb*at_perturb(1,2)&
    !                                              +real(irz)/nr3_perturb*at_perturb(1,3))*(xk(1,ik)-xk(1,ik0)) +&
    !    tpi*(real(irx)/nr1_perturb*at_perturb(2,1)+real(iry)/nr2_perturb*at_perturb(2,2)&
    !                                              +real(irz)/nr3_perturb*at_perturb(2,3))*(xk(2,ik)-xk(2,ik0)) +&
    !    tpi*(real(irx)/nr1_perturb*at_perturb(3,1)+real(iry)/nr2_perturb*at_perturb(3,2)&
    !                                              +real(irz)/nr3_perturb*at_perturb(3,3))*(xk(3,ik)-xk(3,ik0))   
    
    arg=irz*d3+iry*d2+irx*d1
    !!!!!!!!!!!!!!!!!!!!!!!!!!!
    !move vloc center 
    !!!!!!!!!!!!!!!!!!!!!!!!!!!
    !arg=ir3mod*d3+ir2mod*d2+ir1mod*d1
    
    arg=tpi*(real(irx)/dffts%nr1*at(1,1)+real(iry)/dffts%nr2*at(1,2)+real(irz)/dffts%nr3*at(1,3))*(xk(1,ik)-xk(1,ik0)) +&
        tpi*(real(irx)/dffts%nr1*at(2,1)+real(iry)/dffts%nr2*at(2,2)+real(irz)/dffts%nr3*at(2,3))*(xk(2,ik)-xk(2,ik0)) +&
        tpi*(real(irx)/dffts%nr1*at(3,1)+real(iry)/dffts%nr2*at(3,2)+real(irz)/dffts%nr3*at(3,3))*(xk(3,ik)-xk(3,ik0))   
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    ! shift arg center
    arg=irz*d3+(iry-iry/(nr2_perturb/2+1)*nr2_perturb)*d2+(irx-irx/(nr1_perturb/2+1)*nr1_perturb)*d1
    !arg=irz*d3+(iry-iry/(dffts%nr2/2+1)*dffts%nr1)*d2+(irx-irx/(dffts%nr1/2+1)*dffts%nr1)*d1
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !arg=irz*d3+iry*d2+irx*d1
    
    phase=CMPLX(COS(arg),SIN(arg),kind=dp)
    inr=inr+1
    irnmod=(ir3mod)*dffts%nr1*dffts%nr2+(ir2mod)*dffts%nr1+ir1mod+1
    ml=ml+CONJG(psic1(irnmod))*psic2(irnmod)*plot_perturb(inr)*phase
    psicprod=psicprod+CONJG(psic1(irnmod))*psic2(irnmod)*phase
    psicprod1=psicprod1+CONJG(psic1(irnmod))*psic2(irnmod)
    !ml2=ml2+CONJG(psic1(irnmod))*psic2(irnmod)*plot_perturb(inr)*phase
    !mltot=mltot+CONJG(psic1(irnmod))*psic2(irnmod)*phase
    !mltot1=mltot1+CONJG(psic1(irnmod))*psic2(irnmod)
    !write (*,*) 'iri',ir1mod,ir2mod,ir3mod
    !write (*,*) 'grid ', irnmod
    !write (*,*) 'psic1 ', psic1(irnmod)
    !write (*,*) 'psic2 ', psic2(irnmod)
    !write (*,*) 'arg', arg
    
    if ( irnmod<0 .or. irnmod>dffts%nnr ) then
       write (*,*) 'grid mismatch', irnmod, dffts%nnr 
    endif
    
    
    if (irz==dffts%nr3/2) then
            argt= atan2(real(CONJG(psic1(irnmod))*psic2(irnmod)*phase),aimag(CONJG(psic1(irnmod))*psic2(irnmod)*phase))
            argt2= atan2(real(CONJG(psic1(irnmod))*psic2(irnmod)),aimag(CONJG(psic1(irnmod))*psic2(irnmod)))
            if (argt<0) argt=argt+tpi
!            if (argt2<0) argt2=argt2+tpi
!    write(*,*) 'psiplts ik',ik, 'xyz', irx,iry,irz,  'psi1', psic1(irnmod),abs( psic1(irnmod)),  'psi2', &
!                        psic2(irnmod),abs(psic2(irnmod)),&
!   'arg', arg,'prod', CONJG(psic1(irnmod))*psic2(irnmod)*phase, abs(CONJG(psic1(irnmod))*psic2(irnmod)*phase),argt,argt2,&
!            real(CONJG(psic1(irnmod))*psic2(irnmod)),aimag(CONJG(psic1(irnmod))*psic2(irnmod)), psicprod1
    endif

       
    enddo
    enddo
    enddo
    
    !ml=ml/nr1_perturb/nr2_perturb/nr3_perturb
    ml=ml/dffts%nnr
    !mcharge0=0
    !DO ig1 = 1, ngk(ik0)
    !  Do ig2=1, ngk(ik)
    !    if (sum(abs(g(:,igk_k(ig1,ik0))-g(:,igk_k(ig2,ik))))<eps) then
    !         mcharge0=mcharge0+conjg(evc1(ig1,ibnd0))*evc2(ig2,ibnd)
    !     
    !    endif
    !  Enddo
    !Enddo

    !deltak=norm2(xk(:,ik0)-xk(:,ik))*tpiba
    !epsk= splint(eps_data(1,:),eps_data(2,:),eps_data_dy(:),deltak)
    !if (deltak>0.2)      epsk=minval(eps_data(2,:))
  
   !! if (deltak>0.2) then
   !!        !epsk=0.0
   !! endif

    !qxy=norm2(xk(1:2,ik0)-xk(1:2,ik))*tpiba
    !qz= (( xk(3,ik0)-xk(3,ik))**2)**0.5*tpiba
    !mcharge1=mcharge0*4*pi/(deltak**2)*epsk
    !mcharge2=mcharge0*4*pi/(deltak**2)*epsk*(1-(cos(qz*lzcutoff)-sin(qz*lzcutoff)*qz/qxy)*exp(-(qxy*lzcutoff)))
    ! 
    !mcharge1=mcharge1/dffts%nnr
    !mcharge2=mcharge2/dffts%nnr
 
    !
    !write(*,*)  'Mcharge3DLFAes ki->kf',ik0,ik,   mcharge1, abs(mcharge1) , 'epsk', epsk
    !write(*,*)  'Mcharge3DcutLFAes ki->kf'   ,ik0,ik,   mcharge2, abs(mcharge2) , 'epsk', epsk

 
    !END SUBROUTINE calcmdefect_charge_qehlfa
     
    !SUBROUTINE calcmdefect_charge_qehnolfa(ibnd0,ibnd,ik0,ik)
    !use splinelib, only: dosplineint,spline,splint
    !COMPLEX(DP) ::  mcharge0,mcharge1,mcharge2,mcharge3,mcharge4
    !INTEGER :: ibnd, ik, ik0,ibnd0
    !real(DP) , allocatable::  eps_data_dy(:)
    !real(DP) :: epsk
    !!k0screen=tpiba*0.01
    !allocate(eps_data_dy(size(eps_data(1,:))))
    !call spline(eps_data(1,:),eps_data(2,:),0.0_DP,0.0_DP,eps_data_dy(:))


    !mcharge0=0
    !mcharge1=0
    !DO ig1 = 1, ngk(ik0)
    !  Do ig2=1, ngk(ik)

    !         deltakG=norm2(g(1:2,igk_k(ig1,ik0))&
    !                  -g(1:2,igk_k(ig2,ik))&
    !                  +xk(1:2,ik0)-xk(1:2,ik))*tpiba
    !         epsk= splint(eps_data(1,:),eps_data(2,:),eps_data_dy(:),deltakG)
    !         if (deltakG>0.2)      epsk=minval(eps_data(2,:))
    !         mcharge0=conjg(evc1(ig1,ibnd0))*evc2(ig2,ibnd)
    !         mcharge1=mcharge1+mcharge0*tpi/deltakG*epsk
    !     
    !  Enddo
    !Enddo


    !mcharge1=mcharge1/dffts%nnr
    !write(*,*)  'Mcharge2DnoLFAes ki->kf   '   ,ik0,ik,   mcharge1, abs(mcharge1),'epsk',epsk


    !mcharge0=0
    !mcharge1=0
    !mcharge2=0
    !DO ig1 = 1, ngk(ik0)
    !  Do ig2=1, ngk(ik)
    !
    !    mcharge0=conjg(evc1(ig1,ibnd0))*evc2(ig2,ibnd)
    !    deltakG=norm2(g(:,igk_k(ig1,ik0))&
    !               -g(:,igk_k(ig2,ik))&
    !               +xk(:,ik0)-xk(:,ik))*tpiba
    !
    !    qxy=norm2(g(1:2,igk_k(ig1,ik0))&
    !               -g(1:2,igk_k(ig2,ik))&
    !               +xk(1:2,ik0)-xk(1:2,ik))*tpiba
    !    qz= ((g(3,igk_k(ig1,ik0))-g(3,igk_k(ig2,ik))+ &
    !         xk(3,ik0)-xk(3,ik))**2)**0.5*tpiba
    !    epsk= splint(eps_data(1,:),eps_data(2,:),eps_data_dy(:),deltakG)
    !    if (deltakG>0.2) epsk=minval(eps_data(2,:))

    !    mcharge1=mcharge1+mcharge0*4*pi/(deltakG**2)*epsk
    !! write(*,*) 'mcharge1',mcharge1,mcharge0,4*pi,(deltakG**2),epsk
    !    mcharge2=mcharge2+mcharge0*4*pi/(deltakG**2)*epsk&
    !      *(1-(cos(qz*lzcutoff)-sin(qz*lzcutoff)*qz/qxy)*exp(-(qxy*lzcutoff)))
 
    !  Enddo
    !Enddo
    !
    !mcharge1=mcharge1/dffts%nnr
    !mcharge2=mcharge2/dffts%nnr
    !write(*,*)  'Mcharge3DnoLFAes ki->kf  ',ik0,ik,   mcharge1, abs(mcharge1),'epsk',epsk
    !write(*,*)  'Mcharge3DcutnoLFAes ki->kf     '   ,ik0,ik,   mcharge2, abs(mcharge2),'epsk',epsk

    !END SUBROUTINE calcmdefect_charge_qehnolfa
    
END subroutine calcmdefect
