!----------------------------------------------------------------------------
SUBROUTINE calcmdefect(  )
  !----------------------------------------------------------------------------
  !
  !
   USE kinds, ONLY: DP,sgl
  USE mp_images,     ONLY : nimage
  USE mp_bands,      ONLY : nbgrp
  USE mp_pools,      ONLY : npool
   USE mp_pools, ONLY: inter_pool_comm, intra_pool_comm, nproc_pool, me_pool
   USE mp_bands, ONLY: intra_bgrp_comm
   USE mp, ONLY: mp_sum, mp_gather, mp_bcast, mp_get
  !
  USE noncollin_module, ONLY : noncolin
  USE spin_orb,         ONLY : lspinorb
!  USE io_files, ONLY : tmp_dir
  !
  USE plugin_flags, ONLY : use_calcmdefect ,use_pw2casino
  !
   USE ions_base, ONLY : nat, ntyp => nsp, ityp, tau, zv, atm
   USE cell_base, ONLY: omega, alat, tpiba2, at, bg, tpiba
   USE run_info,  ONLY: title    ! title of the run
   USE constants, ONLY: tpi, e2, eps6,pi
   USE ener, ONLY: ewld, ehart, etxc, vtxc, etot, etxcc, demet, ef
   USE fft_base,  ONLY: dfftp, dffts
   USE fft_interfaces, ONLY : fwfft, invfft
   USE gvect, ONLY: ngm, gstart, g, gg, gcutm, igtongl
   USE klist , ONLY: nks, nelec, xk, wk, degauss, ngauss, igk_k, ngk
   USE lsda_mod, ONLY: lsda, nspin
   USE scf, ONLY: rho, rho_core, rhog_core, v, vltot, vrs
   USE ldaU, ONLY : eth
   USE vlocal, ONLY: vloc, strf
   USE wvfct, ONLY: npwx, nbnd, wg, et
   USE gvecw, ONLY: ecutwfc
 !  USE control_flags, ONLY : gamma_only
   USE uspp, ONLY: nkb, vkb, dvan
   USE uspp_param, ONLY: nh
   USE io_global, ONLY: stdout, ionode, ionode_id
   USE io_files, ONLY: nd_nmbr, nwordwfc, iunwfc, prefix, tmp_dir, seqopn, iuntmp
   USE wavefunctions, ONLY : evc,evc1,evc2,evc3,evc4, psic,psic1,psic2!evc1p,evc2p,
!   USE funct, ONLY : dft_is_meta
 !  USE buffers,              ONLY : get_buffer
  USE control_flags,    ONLY : gamma_only, io_level
  USE buffers,          ONLY : open_buffer,get_buffer, close_buffer, save_buffer
!  USE io_files,         ONLY : nwordwfc, iunwfc, restart_dir

  ! USE pw2blip
        USE fft_types, ONLY:  fft_index_to_3d
use input_parameters, only: vperturb_filename,eps_filename, &
kpoint_initial ,kpoint_final ,bnd_initial ,bnd_final ,&
calcmlocal ,calcmnonlocal ,calcmcharge 

      USE becmod, ONLY: becp,becp1,becp2,becp_perturb,becp1_perturb,becp2_perturb, calbec, allocate_bec_type, deallocate_bec_type




!          CHARACTER(LEN=256) :: vperturb_filename
!          CHARACTER(LEN=256) :: calcmcontrol
!          INTEGER :: kpoint_initial 
!          INTEGER :: kpoint_final 
!          INTEGER :: bnd_initial 
!          INTEGER :: bnd_final 
!          LOGICAL :: calcmlocal 
!          LOGICAL :: calcmnonlocal 
!          LOGICAL :: calcmcharge 
!
!          NAMELIST / calcmcontrol / vperturb_filename,eps_filename, kpoint_initial, kpoint_final, &
!                                   bnd_initial, bnd_final, calcmlocal,calcmnonlocal,calcmcharge


!use init_us_2, only: init_us_2_perturb

   IMPLICIT NONE


!  INTEGER, INTENT (IN) :: istep
  !
!  CHARACTER(len=4) :: postfix
  CHARACTER(len=6), EXTERNAL :: int_to_char
  INTEGER, EXTERNAL :: find_free_unit
  INTEGER :: tmp_unit
  INTEGER  :: ios
!  LOGICAL  :: casino_gather = .true.
!  LOGICAL  :: blip_convert = .true.
!  LOGICAL  :: blip_binary = .true.  
!  LOGICAL  :: blip_single_prec = .false.
!  REAL(dp) :: blip_multiplicity = 1.d0
!  INTEGER  :: n_points_for_test = 0
  !
!  NAMELIST / inputpp / &
!   blip_convert, &
!   blip_multiplicity, &
!   blip_binary, &
!   blip_single_prec, &
!   n_points_for_test
  !
  !
  ! LOGICAL, INTENT(in) :: gather,blip,binwrite,single_precision_blips
 !  REAL(dp), INTENT(in) :: multiplicity
 !  INTEGER, INTENT(in) :: n_points_for_test
 !  CHARACTER(*), INTENT(in) :: postfix

   INTEGER, PARAMETER :: n_overlap_tests = 12
   REAL(dp), PARAMETER :: eps = 1.d-10
   INTEGER, PARAMETER :: io = 77, iob = 78
   INTEGER :: npw, ig, ibnd, ik, ispin, nbndup, nbnddown, &
              nk, ig7, ikk, id, ip, iorb, iorb_node, inode, ierr, norb, inr, ig1, ig2
      INTEGER :: j,   na, nt, ijkb0, ikb,jkb, ih,jh, ik0,ibnd0
   INTEGER :: jk(nproc_pool), jspin(nproc_pool), jbnd(nproc_pool)
   INTEGER :: jk2(nproc_pool), jspin2(nproc_pool), jbnd2(nproc_pool)
   INTEGER, ALLOCATABLE :: idx(:), igtog(:), gtoig(:)
   LOGICAL :: exst,dowrite
   REAL(DP) :: ek, eloc, enl, etot_
   INTEGER, EXTERNAL :: atomic_number
   REAL (DP), EXTERNAL :: ewald, w1gauss

   ! number of g vectors (union of all k points)
   INTEGER ngtot_l ! on this processor
   INTEGER, ALLOCATABLE :: ngtot_d(:), ngtot_cumsum(:), indx(:)
   INTEGER ngtot_g ! sum over processors
   REAL(DP), ALLOCATABLE :: g_l(:,:), g_g(:,:), g2(:)
   COMPLEX(DP), ALLOCATABLE :: evc_l(:), evc_g(:), evc_g2(:), avc_tmp(:,:,:), cavc_tmp(:,:,:)
   LOGICAL dotransform

  REAL(DP), ALLOCATABLE :: raux (:), raux2(:,:)
   REAL(dp) :: av_overlap(5,2),avsq_overlap(5,2)

!----------------------------------------------------------------------------!
! Random number generator, using the method suggested by D.E. Knuth in       !
! Seminumerical Algorithms (vol 2 of The Art of Computer Programming).       !
! The method is based on lagged Fibonacci sequences with subtraction.        !
!----------------------------------------------------------------------------!
   INTEGER,PARAMETER :: KK=100,LL=37 ! Leave these.
   REAL(DP) :: ranstate(kk)  ! Determines output of gen_ran_array.

   INTEGER,PARAMETER :: default_seed=310952  ! Random seed, betw. 0 & 2^30-3.
   INTEGER,PARAMETER :: Nran=1009,Nkeep=100 ! See comment on p. 188 of Knuth.
   INTEGER,SAVE :: ran_array_idx=-1
   REAL(DP),SAVE :: ran_array(Nran)




      COMPLEX(DP), ALLOCATABLE :: aux(:), auxr(:), auxg(:), psiprod(:),vgk(:),vgk_perturb(:),vkb_perturb(:,:)
      REAL(dp), ALLOCATABLE :: g2kin(:)
!      REAL(DP) :: charge, etotefield, elocg 
      !REAL(DP) :: mnl, ml,mltot,mnltot
      COMPLEX(DP) :: mnl, ml,mltot,mltot1,mltot2,mnltot,psicnorm,psicprod,enl1

  !LOGICAL :: exst!, wfc_is_collected
     LOGICAL :: offrange
REAL(dp)::arg
COMPLEX(DP)::phase
INTEGER:: irx,iry,irz
INTEGER:: irx2,iry2,irz2
INTEGER:: irx1,iry1,irz1

!   INTEGER :: ig1,ig2
   INTEGER :: ix0,ix1,ix2
   INTEGER :: iy0,iy1,iy2
   INTEGER :: iz0,iz1,iz2, ikpsi0, ikpsi1, ikpsi2
COMPLEX(DP)::vlfft
 

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!! vl in super2prim
integer :: iunpot_perturb
  character (len=75) :: filpot_perturb
  character (len=75) :: title_perturb
  character (len=3) ,allocatable :: atm_perturb(:)

   integer :: nr1x_perturb, nr2x_perturb, nr3x_perturb, nr1_perturb, nr2_perturb, nr3_perturb, &
 nat_perturb, ntyp_perturb, ibrav_perturb, plot_num_perturb,  i_perturb,nkb_perturb
  integer :: iunplot_perturb, ios_perturb, ipol_perturb, na_perturb, nt_perturb, &
 ir_perturb, ndum_perturb
  real(DP) :: celldm_perturb (6), gcutm_perturb, dual_perturb, ecut_perturb,  at_perturb(3,3), omega_perturb

integer, allocatable:: ityp_perturb (:)
real(DP),allocatable:: zv_perturb (:), tau_perturb (:, :)  , plot_perturb (:)
   integer :: ir1mod,ir2mod,ir3mod,irnmod
!!!!! vl in super2prim
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
real(DP):: d1,d2,d3
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! charge
      COMPLEX(DP), ALLOCATABLE ::  mlat1(:),mlat2(:)
      INTEGER :: iscx, iscy,nscx,nscy
REAL(dp)::k0screen, kbT,deltak,deltakG0,deltakG, qxy,qz,lzcutoff
INTEGER:: icount,jcount,kcount
real(DP):: mscreen,mcharge, rmod
INTEGER:: Nlzcutoff,iNlzcutoff,flag1,flag2, nNlzcutoff,Ngzcutoff
      COMPLEX(DP) ::  ml1,ml2, ml3,ml4,ml5,ml6,ml7
!!!!! eps data file 
   integer :: nepslines
real(DP),allocatable:: eps_data (:,:)
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!          NAMELIST / calcmcontrol / vperturb_filename,eps_filename, kpoint_initial, kpoint_final, &
!                                   bnd_initial, bnd_final, calcmlocal,calcmnonlocal,calcmcharge

!          CHARACTER(LEN=256) :: vperturb_filename='vloc.dat'
!          CHARACTER(LEN=256) :: eps_filename='eps.dat'
!          INTEGER :: kpoint_initial 
!          INTEGER :: kpoint_final 
!          INTEGER :: bnd_initial 
!          INTEGER :: bnd_final 
!          LOGICAL :: calcmlocal = .false.
!          LOGICAL :: calcmnonlocal = .false.
!          LOGICAL :: calcmcharge = .false.

!write (*,*) vperturb_filename
   ALLOCATE (idx (ngm) )
   ALLOCATE (igtog (ngm) )
   ALLOCATE (gtoig (ngm) )
   idx(:) = 0
   igtog(:) = 0
   IF( lsda )THEN
      nbndup = nbnd
      nbnddown = nbnd
      nk = nks/2
      !     nspin = 2
   ELSE
      nbndup = nbnd
      nbnddown = 0
      nk = nks
      !     nspin = 1
   ENDIF


   DO ispin = 1, nspin
      DO ik = 1, nk
         ikk = ik + nk*(ispin-1)
         idx( igk_k(1:ngk(ikk),ikk) ) = 1
      ENDDO
   ENDDO

   ngtot_l = 0
   DO ig = 1, ngm
      IF( idx(ig) >= 1 )THEN
         ngtot_l = ngtot_l + 1
         igtog(ngtot_l) = ig
         gtoig(ig) = ngtot_l
      ENDIF
   ENDDO




!write(*,*) 'use_calcmdefect', use_calcmdefect
  IF ( use_calcmdefect ) THEN
    write (*,*) 'enter calcmdefect module'
    !
    IF ( npool > 1 .or. nimage > 1 .or. nbgrp > 1 ) &
      CALL errore('calcmdefect', 'pool/band/image parallelization not (yet) implemented',1)
    IF ( noncolin .OR. lspinorb ) &
      CALL errore('calcmdefect', 'noncollinear/spinorbit magnetism not (yet) implemented',2)
    !
    tmp_unit = find_free_unit()
    OPEN(unit=tmp_unit,file = trim(tmp_dir)//'calcmdefect.dat',status='old',err=20)
    OPEN(unit=tmp_unit,file = trim(tmp_dir)//'calcmdefect.dat',status='old',err=20)
20 continue
!    READ(tmp_unit,inputpp,iostat=ios)
    CLOSE(tmp_unit)
  ENDIF

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!! vl in super2prim read pot

iunpot_perturb=99 
filpot_perturb=vperturb_filename
!write(*,*) vperturb_filename
     open (unit = iunpot_perturb, file = filpot_perturb, form = 'formatted', &
          status = 'old', err = 99, iostat = ios_perturb)
99 call errore ('mloc', 'opening file '//TRIM(filpot_perturb), abs (ios_perturb) )

     read (iunpot_perturb, '(a)') title_perturb
     read (iunpot_perturb, * ) nr1x_perturb, nr2x_perturb, nr3x_perturb,&
 nr1_perturb, nr2_perturb, nr3_perturb, nat_perturb, ntyp_perturb

allocate(plot_perturb( nr1_perturb*nr2_perturb*nr3_perturb))
allocate(ityp_perturb(nat_perturb))
allocate(zv_perturb(ntyp_perturb))
allocate(atm_perturb(ntyp_perturb))
allocate(tau_perturb(3,nat_perturb))

     read (iunpot_perturb, * ) ibrav_perturb, celldm_perturb
     if (ibrav_perturb == 0) then
        do i_perturb = 1,3
           read ( iunpot_perturb, * ) ( at_perturb(ipol_perturb,i_perturb),ipol_perturb=1,3 )
        enddo
     else
        call latgen(ibrav_perturb,celldm_perturb,at_perturb(1,1),at_perturb(1,2),at_perturb(1,3),omega_perturb)
        at_perturb(:,:)=at_perturb(:,:)/alat
     endif
     read (iunpot_perturb, * ) gcutm_perturb, dual_perturb, ecut_perturb, plot_num_perturb
     !read (iunpot_perturb, *) &
     read (iunpot_perturb, '(i4,3x,a2,3x,f5.2)') &
             (nt_perturb, atm_perturb(nt_perturb), zv_perturb(nt_perturb), nt_perturb=1, ntyp_perturb)
     read (iunpot_perturb, *) (ndum_perturb,  (tau_perturb (ipol_perturb, na_perturb), ipol_perturb = 1, 3), &
             ityp_perturb(na_perturb), na_perturb = 1, nat_perturb)
     read (iunpot_perturb, * ) (plot_perturb (ir_perturb), ir_perturb = 1, nr1_perturb * nr2_perturb * nr3_perturb)
!write (*,*) 'dv readin-vrs', sum(plot_perturb(:)-vrs(:,1))
write (*,*) 'dv readin-vrs: , sum(plot_perturb(:)),sum(vrs(:,1)),sum(plot_perturb(:))-sum(vrs(:,1))'
write (*,*)  sum(plot_perturb(:)),sum(vrs(:,1)),sum(plot_perturb(:))-sum(vrs(:,1))

write (*,*) 'at-perturb', at_perturb
write (*,*) 'nr1_perturb ', nr1_perturb
write (*,*) 'nr2_perturb ', nr2_perturb
write (*,*) 'nr3_perturb ', nr3_perturb
write (*,*) 'at', at(:,1)
write (*,*) 'at', at(:,2)
write (*,*) 'at', at(:,3)
write (*,*) 'dfftp%nr1 ', dfftp%nr1
write (*,*) 'dfftp%nr2 ', dfftp%nr2
write (*,*) 'dfftp%nr3 ', dfftp%nr3
write (*,*) 'dffts%nr1 ', dffts%nr1
write (*,*) 'dffts%nr2 ', dffts%nr2
write (*,*) 'dffts%nr3 ', dffts%nr3

!write (*,*) 'dv readin-vrs', plot_perturb(:)-vrs(:,1)
!write (*,*) 'dv readin-vrs', vrs(:,1)
!write (*,*) 'dv readin-vrs', plot_perturb(:)
!
!!!!!! vl in super2prim read pot
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!! eps read 
iunpot_perturb=99 
filpot_perturb='eps.dat'
     open (unit = iunpot_perturb, file = filpot_perturb, form = 'formatted', &
          status = 'old', err = 99, iostat = ios_perturb)

     read (iunpot_perturb, '(a)') title_perturb
     read (iunpot_perturb, * ) nepslines

allocate(eps_data(2,nepslines))
do ig= 1, nepslines

     read (iunpot_perturb, * ) eps_data(1,ig),eps_data(2,ig)
enddo
write (*,*) 'eps lines  ', nepslines
write (*,*) 'eps data  ', eps_data(1,1),eps_data(2,1)
write (*,*) 'eps data  ', eps_data(1,2),eps_data(2,2)
write (*,*) 'eps data  ', eps_data(1,3),eps_data(2,3)
write (*,*) 'eps data  ', eps_data(1,7),eps_data(2,7)

!write (*,*) 'dv readin-vrs', plot_perturb(:)-vrs(:,1)
!write (*,*) 'dv readin-vrs', vrs(:,1)
!write (*,*) 'dv readin-vrs', plot_perturb(:)
!
!!!!!! eps read 
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!! initialization

  ALLOCATE (aux(dfftp%nnr))
  ALLOCATE(auxr(dfftp%nnr))
  ALLOCATE(psiprod(dfftp%nnr))
  ALLOCATE(vgk(dfftp%nnr))
  ALLOCATE(vgk_perturb(dfftp%nnr))
  !ALLOCATE(vgk(npw))
  !ALLOCATE(vgk_perturb(npw))
  ALLOCATE( auxg( dfftp%ngm ) )
mltot=0
mnltot=0

mltot1=0
mltot2=0
nkb_perturb=0
               DO nt_perturb = 1, ntyp_perturb
                  DO na_perturb = 1, nat_perturb
                     IF(ityp_perturb (na_perturb) == nt_perturb)THEN
                         nkb_perturb = nkb_perturb + nh (nt_perturb)
                     ENDIF
                  ENDDO
               ENDDO


      CALL allocate_bec_type ( nkb, nbnd, becp )
      CALL allocate_bec_type ( nkb, nbnd, becp1 )
      CALL allocate_bec_type ( nkb, nbnd, becp2 )
!write (*,*) '1 ', shape(vkb_perturb),'becp',shape(becp1%k),nkb,nbnd
      CALL allocate_bec_type ( nkb_perturb, nbnd, becp_perturb )
      CALL allocate_bec_type ( nkb_perturb, nbnd, becp1_perturb )
      CALL allocate_bec_type ( nkb_perturb, nbnd, becp2_perturb )
!write (*,*) '1 ', shape(vkb_perturb),'becp',shape(becp1_perturb%k),nkb_perturb,nbnd

  ALLOCATE(vkb_perturb(npwx,nkb_perturb))

allocate(evc1(size(evc)/nbnd,nbnd))
allocate(psic1(dfftp%nnr))
allocate(evc2(size(evc)/nbnd,nbnd))
allocate(psic2(dfftp%nnr))
allocate(evc3(size(evc)/nbnd,nbnd))
allocate(evc4(size(evc)/nbnd,nbnd))

allocate(mlat2(dfftp%nr3))
allocate(mlat1(dfftp%nr3))

        CALL open_buffer ( iuntmp, 'wfctemp', nwordwfc, io_level, exst )
do ik=1,nk

        CALL get_buffer ( evc, nwordwfc, iunwfc, ik )
        CALL save_buffer ( evc, nwordwfc, iuntmp, ik )
write (*,*) "save" ,ik
enddo
        CALL close_buffer ( iuntmp, 'KEEP' )
        CALL open_buffer ( iuntmp, 'wfctemp', nwordwfc, io_level, exst )
!call flush(iuntmp)
write (*,*) "size evc evc1:" , size(evc),size(evc1)
write (*,*) "s nnr:" , dffts%nnr
write (*,*) "p nnr:" , dfftp%nnr
!write (*,*) "ngk(4):" ,  igk_k(4)
!write (*,*) "ngk(14):" , igk_k(14)
!write (*,*) "ngk(29):" , igk_k(29)

!!!!!! initialization
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


!!!!!!!!!!!eloc from rho*vloc
mnl=0
DO ig = 1, dffts%nnr
mnl=mnl+rho%of_r(ig,1)
ENDDO
write(*,*), 'rhotot',mnl, ml/mnl*8

ml=0
auxr(:) =  vltot(:)
DO ig = 1, dffts%nnr
ml=ml+rho%of_r(ig,1)*auxr(ig)
ENDDO
write(*,*), 'el=rho*vltot', ml

ml=0
auxr(:) = v%of_r(:,1) 
DO ig = 1, dffts%nnr
ml=ml+rho%of_r(ig,1)*auxr(ig)
ENDDO
write(*,*), 'el=rho*v%of_r', ml

ml=0
auxr(:) = vrs(:,1)
DO ig = 1, dffts%nnr
ml=ml+rho%of_r(ig,1)*auxr(ig)
ENDDO
write(*,*), 'el=rho*vrs', ml
!!!!!!!!!!!eloc from rho*vloc



!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!cut off psi
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!
! ibnd0 = 10
! ibnd = 10
! ik0=3
! ik = 4
! ikk = 4
!
!iNlzcutoff = 1
!Nlzcutoff=dffts%nr3/10*iNlzcutoff+1
!lzcutoff=Nlzcutoff*alat/dffts%nr1
!
!psic2(1:dffts%nnr) = (0.d0,0.d0)
!psic1(1:dffts%nnr) = (0.d0,0.d0)
!        CALL get_buffer ( evc1, nwordwfc, iunwfc, ik0 )
!        CALL get_buffer ( evc2, nwordwfc, iunwfc, ik )
!DO ig = 1, ngk(ikk)
!   psic2 (dffts%nl (igk_k(ig,ikk) ) ) = evc2 (ig, ibnd)
!ENDDO
!DO ig = 1, ngk(ik0)
!   psic1 (dffts%nl (igk_k(ig,ik0) ) ) = evc1 (ig, ibnd0)
!ENDDO
!    CALL invfft ('Wave', psic2, dffts)
!    CALL invfft ('Wave', psic1, dffts)
!flag1=0
!DO ig = 1, dffts%nnr
!    CALL fft_index_to_3d (ig, dffts, irx,iry,irz, offrange)
!    if (irz>=Nlzcutoff .and. irz <=dffts%nr3-Nlzcutoff) then
!       flag1=1
!       psic1(ig)=0
!       psic2(ig)=0
!   endif
!enddo
!if (flag1==1) then
!write(*,*) 'charged 3Dto2D changed'
!endif
!    CALL fwfft ('Wave', psic2, dffts)
!    CALL fwfft ('Wave', psic1, dffts)
!!write(*,*)'xyz,ig', irx,iry,irz,ig
!evc3(:,:)=0.0
!evc4(:,:)=0.0
!DO ig = 1, ngk(ikk)
! evc4 (ig, ibnd)=  psic2 (dffts%nl (igk_k(ig,ikk) ) ) 
!ENDDO
!DO ig = 1, ngk(ik0)
! evc3 (ig, ibnd0)=  psic1 (dffts%nl (igk_k(ig,ik0) ) ) 
!ENDDO
!write (*,*) 'evc3-evc1', evc3(:,:)-evc1(:,:)
!        CALL save_buffer ( evc3, nwordwfc, iunwfc, ik0 )
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!cut off psi
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!










!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! loop through k points
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!ik0=ikk
!ibnd0=ibnd
!ibnd0=10
!ik0=4
!do ik0=3,33
!DO ibnd0 = 10, 10
!DO ibnd = 10, 10
ibnd0=bnd_initial
ibnd=bnd_final
!DO ibnd = 1, nbnd
do ik0=kpoint_initial,kpoint_initial
DO ik = 1, nk

DO ispin = 1, nspin
ikk = ik + nk*(ispin-1)
    call calcmdefect_ml(ibnd0,ibnd,ik0,ik)
    call calcmdefect_mnl(ibnd0,ibnd,ik0,ik)
    call calcmdefect_charge(ibnd0,ibnd,ik0,ik)

enddo
enddo
enddo
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

CONTAINS

   SUBROUTINE calcmdefect_ml(ibnd0,ibnd,ik0,ik)
  USE cell_base,       ONLY : alat, ibrav, omega, at, bg, celldm, wmass
!      USE exx,    ONLY : exxenergy2, fock2
!      USE funct,  ONLY : dft_is_hybrid
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! if uncomment, error message incompile: 
!Error: The name ‘latgen’ at (1) has already been used as an external module name
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!use latgen, only: latgen
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

      INTEGER :: ibnd, ik, ik0,ibnd0
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
ml=0

            IF( nks > 1 ) CALL get_buffer (evc, nwordwfc, iunwfc, ik )

     npw = ngk(ik)
!            CALL init_us_2 (npw, igk_k(1,ik), xk (1, ik), vkb)
!            CALL calbec ( npw, vkb, evc, becp )

        CALL get_buffer ( evc1, nwordwfc, iunwfc, ik0 )
        CALL get_buffer ( evc2, nwordwfc, iunwfc, ik )
!!!!!!!!!!!!write (*,*) "size evc evc1:" , size(evc),size(evc1)
!!!!!!!!!!!!!!! evc

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!! Vl real space direct
!!! Vl: Hartree
!IF( ALLOCATED(auxr) )  DEALLOCATE(auxr ) 
!write(stdout,*)'ngm,nl,nlm',dfftp%ngm,dfftp%nl,dfftp%nlm
!write(stdout,*)'nlm',dfftp%nlm
!write(stdout,*)'nl',dfftp%nl
!        auxr(:) = v%of_r(:,1) + vltot(:)
!        auxr(:) = v%of_r(:,1) 
!        auxr(:) =  vltot(:)
        auxr(:) =  vrs(:,1)
!write (*,*) 'size of vofr, vltot,vloc' , size(v%of_r), size(vltot), size(vloc), size(vrs)
!  CALL fwfft ('Rho', auxr, dfftp)
!  auxg(:) = auxr(dfftp%nl(:))
!write (*,*)'auxg,auxr sums', sum(auxg),sum(auxr)
ml=0
mltot=0


                 psic2(1:dffts%nnr) = (0.d0,0.d0)
                 psic1(1:dffts%nnr) = (0.d0,0.d0)
!write(*,*) "debug"
!write(*,*) "psic1", psic1
                 DO ig = 1, ngk(ik)
                    psic2 (dffts%nl (igk_k(ig,ik) ) ) = evc2 (ig, ibnd)
!write(*,*) 'evc1, evc1/evc2 ' , evc1 (ig, ibnd), evc1 (ig, ibnd)/evc2 (ig, ibnd)
                 ENDDO
                 DO ig = 1, ngk(ik0)
                    psic1 (dffts%nl (igk_k(ig,ik0) ) ) = evc1 (ig, ibnd0)
!                    ml=ml+auxr(dfftp%nl (igk_k(ig,1) ) ) * evc (ig, ibnd) *CONJG(evc (ig, ibnd))
!                     mltot=mltot+conjg(evc1(ig,ibnd0))*(evc2(ig,ibnd)) !* exp(ikr)

                 ENDDO
!psicnorm=0
!                 DO ig = 1, dffts%nnr
!                     enl1=(log((psic1(ig))/psic2(ig)))
!                   write(*,*) 'psi element product, ratio,', (enl1)
!                 ENDDO
psiprod(:)=psic1(:)
                 CALL invfft ('Wave', psic2, dffts)
                 CALL invfft ('Wave', psic1, dffts)

!                 CALL fwfft ('Wave', psic1, dffts)
!write(*,*) 'evc-ffpevc',sum(abs(psic1(:)-psiprod(:)))
!write(*,*) 'evc',psiprod(:)
!write(*,*) 'ffpevc',psic1(:)
!                 CALL invfft ('Wave', psic1, dffts)

!write(*,*) 'psic1', psic1(1:3)
!write(*,*) 'pevc1:phases', AIMAG(LOG(psic1(1)))
!write(*,*) 'pevc1:phases', AIMAG(LOG(psic1(2)))
!write(*,*) 'pevc1:phases', AIMAG(LOG(psic1(3)))
!write(*,*) 'pevc1:phases', AIMAG(LOG(psic1(4)))
!write(*,*) 'pevc1:phases', AIMAG(LOG(psic1(5)))
!write(*,*) 'pevc1:phases', AIMAG(LOG(psic1(6)))
!write(*,*) at(:,1)
!write(*,*) at(:,2)
!write(*,*) at(:,3)
!write(*,*) 't'
!!write(*,*) 'arg',    2*3.141592653*(irx/dffts%nr1*at(1,1)+iry/dffts%nr2*at(1,2)+irz/dffts%nr3*at(1,3))*xk(1,ik)   
!!write(*,*) 'arg',    2*3.141592653*(irx/dffts%nr1*at(2,1)+iry/dffts%nr2*at(2,2)+irz/dffts%nr3*at(2,3))*xk(2,ik)   
!!write(*,*) 'arg',    2*3.141592653*(irx/dffts%nr1*at(3,1)+iry/dffts%nr2*at(3,2)+irz/dffts%nr3*at(3,3))*xk(3,ik)   
!    CALL fft_index_to_3d (21, dffts, irx,iry,irz, offrange)
!arg=2*3.141592653*(real(irx)/dffts%nr1*at(1,1)+real(iry)/dffts%nr2*at(1,2)+real(irz)/dffts%nr3*at(1,3))*xk(1,ik) +&
!    2*3.141592653*(real(irx)/dffts%nr1*at(2,1)+real(iry)/dffts%nr2*at(2,2)+real(irz)/dffts%nr3*at(2,3))*xk(2,ik) +&
!    2*3.141592653*(real(irx)/dffts%nr1*at(3,1)+real(iry)/dffts%nr2*at(3,2)+real(irz)/dffts%nr3*at(3,3))*xk(3,ik)   
!write(*,*) 'ir', irx,iry,irz, arg
!    CALL fft_index_to_3d (22, dffts, irx,iry,irz, offrange)
!arg=2*3.141592653*(real(irx)/dffts%nr1*at(1,1)+real(iry)/dffts%nr2*at(1,2)+real(irz)/dffts%nr3*at(1,3))*xk(1,ik) +&
!    2*3.141592653*(real(irx)/dffts%nr1*at(2,1)+real(iry)/dffts%nr2*at(2,2)+real(irz)/dffts%nr3*at(2,3))*xk(2,ik) +&
!    2*3.141592653*(real(irx)/dffts%nr1*at(3,1)+real(iry)/dffts%nr2*at(3,2)+real(irz)/dffts%nr3*at(3,3))*xk(3,ik)   
!write(*,*) 'ir', irx,iry,irz, arg
!    CALL fft_index_to_3d (23, dffts, irx,iry,irz, offrange)
!arg=2*3.141592653*(real(irx)/dffts%nr1*at(1,1)+real(iry)/dffts%nr2*at(1,2)+real(irz)/dffts%nr3*at(1,3))*xk(1,ik) +&
!    2*3.141592653*(real(irx)/dffts%nr1*at(2,1)+real(iry)/dffts%nr2*at(2,2)+real(irz)/dffts%nr3*at(2,3))*xk(2,ik) +&
!    2*3.141592653*(real(irx)/dffts%nr1*at(3,1)+real(iry)/dffts%nr2*at(3,2)+real(irz)/dffts%nr3*at(3,3))*xk(3,ik)   
!write(*,*) 'ir', irx,iry,irz, arg
!
!write(*,*) 'arg', (real(irx)/dffts%nr1*at(1,1)+real(iry)/dffts%nr2*at(1,2)+real(irz)/dffts%nr3*at(1,3))*xk(1,ik) 
!write(*,*) 'arg', (real(irx)/dffts%nr1*at(2,1)+real(iry)/dffts%nr2*at(2,2)+real(irz)/dffts%nr3*at(2,3))*xk(2,ik) 
!write(*,*) 'arg', (real(irx)/dffts%nr1*at(3,1)+real(iry)/dffts%nr2*at(3,2)+real(irz)/dffts%nr3*at(3,3))*xk(3,ik)   
!write(*,*) 'pevc2:phases', AIMAG(LOG(psic2(1)))
!write(*,*) 'pevc2:phases', AIMAG(LOG(psic2(2)))
!write(*,*) 'pevc2:phases', AIMAG(LOG(psic2(3)))

!write(*,*) 'psic1', psic1(1:2)
!write(*,*) 'xk(ik)', xk(:,ik),ik
!write(*,*) 'at', at
!write(*,*) 'evcprod', mltot
!mltot=0
!psicnorm=0


ml=0
DO ig = 1, dffts%nnr
    CALL fft_index_to_3d (ig, dffts, irx,iry,irz, offrange)
!write(*,*)'xyz,ig', irx,iry,irz,ig
!write(*,*)'nrxyz', dffts%nr1,dffts%nr2,dffts%nr3
!write(*,*)'k', xk(1:3,ik)
! write(*,*) 'arg x',   irx*2*3.141592653/dffts%nr1*xk(1,ik) 
! write(*,*) 'arg y',   iry*2*3.141592653/dffts%nr2*xk(2,ik) 
! write(*,*) 'arg z',   irz*2*3.141592653/dffts%nr3*xk(3,ik) 



!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1
!!!!!!arg=(k-k0)*r
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1
arg=tpi*(real(irx)/dffts%nr1*at(1,1)+real(iry)/dffts%nr2*at(1,2)+real(irz)/dffts%nr3*at(1,3))*(xk(1,ik)-xk(1,ik0)) +&
    tpi*(real(irx)/dffts%nr1*at(2,1)+real(iry)/dffts%nr2*at(2,2)+real(irz)/dffts%nr3*at(2,3))*(xk(2,ik)-xk(2,ik0)) +&
    tpi*(real(irx)/dffts%nr1*at(3,1)+real(iry)/dffts%nr2*at(3,2)+real(irz)/dffts%nr3*at(3,3))*(xk(3,ik)-xk(3,ik0))   

!arg=-arg/alat
!arg=irx*2*3.141592653/dffts%nr1*xk(1,ik) +&
!    iry*2*3.141592653/dffts%nr2*xk(2,ik) +&
!    irz*2*3.141592653/dffts%nr3*xk(3,ik) 
!arg=-arg
phase=CMPLX(COS(arg),SIN(arg),kind=dp)
phase=1
!write (*,*) 'arg, phase', arg,phase
                      ml=ml+CONJG(psic1(ig))*psic2(ig)*auxr(ig)*phase
                      mltot=mltot+CONJG(psic1(ig))*psic2(ig)*phase
!                     enl1=(log((psic1(ig))/psic2(ig)))
                  !if ((ik .eq. 2 .or. ik .eq.1 .or. ik.eq.14 ).and. ibnd .eq. 1) write(*,*) mltot, (enl1), arg, (arg-0.145)-(enl1)
!                  if ((ik .eq. 4 .or. ik .eq.5 .or. ik.eq.14 ).and. ibnd .eq. 1) write(*,*) mltot
!                   write(*,*) mltot, (enl1), arg, (arg-0.145)-(enl1)
!                   write(*,*) 'psi element product, ratio, ikr, ratio-ikr:', (enl1), arg, (arg)-aimag(enl1)

!                   write(*,*) 'psi ', psic1(ig),psic2(ig),psic1(ig)/psic2(ig),enl1
!                  if ((ik .eq. 4 .or. ik .eq.5 .or. ik.eq.14 ).and. ibnd .eq. 1) write(*,*) mltot
!psicnorm=psicnorm+CONJG(psic(ig))*psic(ig)
ENDDO
ml=ml/dffts%nnr
!write(*,*) 'psicprod', mltot/dffts%nnr
!mltot=0
                !
!                IF ( ibnd < ibnd_end ) THEN
!                   !
!                   ! ... two ffts at the same time
!                   !
!                   psic(dffts%nl(1:npw))  = evc(1:npw,ibnd) + &
!                                           ( 0.D0, 1.D0 ) * evc(1:npw,ibnd+1)
!                   psic(dffts%nlm(1:npw)) = CONJG( evc(1:npw,ibnd) - &
!                                           ( 0.D0, 1.D0 ) * evc(1:npw,ibnd+1) )
!                   !
!                ELSE
!                   !
!                   psic(dffts%nl (1:npw))  = evc(1:npw,ibnd)
!                   psic(dffts%nlm(1:npw)) = CONJG( evc(1:npw,ibnd) )
!                   !
!                END IF
                !
                   !psic(dffts%nl(1:npw))  = evc(1:npw,ibnd) + &
!              DO j = 1, dfftp%nnr
!                  IF(gamma_only)THEN !.and.j>1)then
!                     ml = ml +  conjg(psic(j,ibnd)) * evc(j,ibnd) * &
!                                    auxg(j)
!                  ELSE
!                     ml = ml +  conjg(evc(j,ibnd)) * evc(j,ibnd) * &
!                                    auxg(j)
!                  ENDIF
!               ENDDO
!*wg(ibnd,ik)
!if(ibnd .eq. 9) 
!write (*,*) 'omega: ', omega
!write (*,*) 'vrs-vofr ',  vrs(:,1)- v%of_r(:,1) - vltot(:)
arg=aimag(log(ml))
mltot1=mltot1+ml*wg(ibnd,ik)!
write (stdout,*) 'ml: ik0, ik, ibnd0, ibnd: ', ik0, ik, ibnd0, ibnd, 'ml', ml , abs(ml),log(ml)!, arg, 'mltot', mltot1
write (stdout,*) 'modml original, ik0->ik:', ik0, ik, abs(ml)
write (stdout,*) 'psiprodphase original ', mltot
write (stdout,*) 'mltot ', mltot1
arg=0
!write (stdout,*) 'size evc auxg auxr: ', size(evc),size(auxg),size(auxr)
!!!! Vl real space direct
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!! Vl in kspace direct
!ml=0
!
!!phase=CMPLX(COS(arg),SIN(arg),kind=dp)
!!
!!auxg(:)=0.00
!!Do ig=1,npw
!!  Do inr=1,dffts%nnr
!!    CALL fft_index_to_3d (inr, dffts, irx,iry,irz, offrange)
!!    arg=2*3.141592653*((real(irx)/dffts%nr1*at(1,1)+real(iry)/dffts%nr2*at(1,2)+real(irz)/dffts%nr3*at(1,3))*(xk(1,ik)-xk(1,ik0)+g(1,igk_k(ig,ik))) +&
!!                       (real(irx)/dffts%nr1*at(2,1)+real(iry)/dffts%nr2*at(2,2)+real(irz)/dffts%nr3*at(2,3))*(xk(2,ik)-xk(2,ik0)+g(2,igk_k(ig,ik))) +&
!!                       (real(irx)/dffts%nr1*at(3,1)+real(iry)/dffts%nr2*at(3,2)+real(irz)/dffts%nr3*at(3,3))*(xk(3,ik)-xk(3,ik0)+g(3,igk_k(ig,ik))) )  
!!    phase=CMPLX(COS(arg),SIN(arg),kind=dp)
!!    auxg(ig)=auxg(ig)+auxr(inr)*phase
!!  Enddo
!!Enddo
!
!!psic2(1:dffts%nnr) = (0.d0,0.d0)
!!psic1(1:dffts%nnr) = (0.d0,0.d0)
!!DO ig = 1, npw
!!   psic2 (dffts%nl (igk_k(ig,ik) ) )  = evc2 (ig, ibnd)
!!   psic1 (dffts%nl (igk_k(ig,ik0) ) ) = evc1 (ig, ibnd0)
!!Enddo
!
!!      write(*,*) 'psiprod nr1',dffts%nr1
!!      write(*,*) 'psiprod nr2',dffts%nr2
!!      write(*,*) 'psiprod nr3',dffts%nr3
!!      write(*,*) 'psiprod g',g(1,:), size(g)
!!      write(*,*) 'psiprod g',igk_k, size(igk_k)
!
!psiprod(:)=0.00
!vgk(:)=0.00
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!         check ig, igk_k(ig,ik), dffts%nl(igk_k), idex or irx..., g
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!Do ig=1,ngm
!!    CALL fft_index_to_3d (dffts%nl (ig ), dffts, irx,iry,irz, offrange)
!!write (*,*) 'ig,nl,irx' ,ig,dffts%nl (ig )
!!write (*,*) 'irx' , irx, iry, irz
!!write (*,*) 'g' , g(:,ig)
!!    Enddo
!!
!!  DO ig1 = 1, ngk(ik0)
!!    CALL fft_index_to_3d (dffts%nl (igk_k(ig1,ik0) ), dffts, irx1,iry1,irz1, offrange)
!!write (*,*) 'ig1,igk,nl' ,ig1, igk_k(ig1,ik0), dffts%nl (igk_k(ig1,ik0))
!!write (*,*) 'irx1' , irx1, iry1, irz1
!!write (*,*) 'g1' ,g(:,igk_k(ig1,ik0))
!!    Enddo
!!
!!    Do ig2=1,npw
!!    CALL fft_index_to_3d (dffts%nl (igk_k(ig2,ik) ), dffts, irx2,iry2,irz2, offrange)
!!write (*,*) 'ig2,igk,nl' ,ig2, igk_k(ig2,ik), dffts%nl (igk_k(ig2,ik))
!!write (*,*) 'irx2' , irx2, iry2, irz2
!!write (*,*) 'g2' ,g(:,igk_k(ig2,ik))
!!    Enddo
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!         check ig, igk_k(ig,ik), dffts%nl(igk_k), idex or irx..., g
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!
!Do ig=1,ngm
!!Do ig=1,npw
!!write (*,*) 'loop1' , ig
!! Do ig1=1,npw
!  DO ig1 = 1, ngk(ik0)
!    Do ig2=1,npw
!!    CALL fft_index_to_3d (igk_k(ig1), dffts, irx1,iry1,irz1, offrange)
!!    CALL fft_index_to_3d (igk_k(ig2), dffts, irx2,iry2,irz2, offrange)
!!    CALL fft_index_to_3d (ig, dffts, irx,iry,irz, offrange)
!!      irx1=g(1,igk_k(ig1,ik0))
!!      iry1=g(2,igk_k(ig1,ik0))
!!      irz1=g(3,igk_k(ig1,ik0))
!!      irx2=g(1,igk_k(ig2,ik))
!!      iry2=g(2,igk_k(ig2,ik))
!!      irz2=g(3,igk_k(ig2,ik))
!!      irx=g(1,ig)
!!      iry=g(2,ig)
!!      irz=g(3,ig)
!if (sum(abs(g(:,igk_k(ig1,ik0))-g(:,igk_k(ig2,ik))-g(:,ig)))<1e-4) then
!!      if( ( abs((irx1-irx2)  -  irx)<1e-4 )  .and. &
!!          ( abs((iry1-iry2)  -  iry)<1e-4 )  .and. &
!!          ( abs((irz1-irz2)  -  irz)<1e-4 )  ) then
!         psiprod(ig)=psiprod(ig)+conjg(evc1(ig1,ibnd0))*evc2(ig2,ibnd)
!
!!write  (*,*) 'sumg' , sum(abs(g(:,igk_k(ig1,ik0))-g(:,igk_k(ig2,ik))-g(:,ig)))
!!write  (*,*) 'absg' ,abs(g(:,igk_k(ig1,ik0))-g(:,igk_k(ig2,ik))-g(:,ig))
!!write (*,*) 'irx' , irx, iry, irz
!      endif
!    Enddo
!  Enddo
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!debug fft in one unit
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!                 psic2(1:dffts%nnr) = (0.d0,0.d0)
!!                 psic1(1:dffts%nnr) = (0.d0,0.d0)
!!!write(*,*) "debug"
!!!write(*,*) "psic1", psic1
!!                 DO ig = 1, npw
!!                    psic2 (dffts%nl (igk_k(ig,ik) ) ) = evc2 (ig, ibnd)
!!!write(*,*) 'evc1, evc1/evc2 ' , evc1 (ig, ibnd), evc1 (ig, ibnd)/evc2 (ig, ibnd)
!!                 ENDDO
!!                 DO ig = 1, ngk(ik0)
!!                    psic1 (dffts%nl (igk_k(ig,ik0) ) ) = evc1 (ig, ibnd0)
!!!                    ml=ml+auxr(dfftp%nl (igk_k(ig,1) ) ) * evc (ig, ibnd) *CONJG(evc (ig, ibnd))
!!!                     mltot=mltot+conjg(evc1(ig,ibnd0))*(evc2(ig,ibnd)) !* exp(ikr)
!!
!!                 ENDDO
!!!psicnorm=0
!!                 DO ig = 1, dffts%nnr
!!                     enl1=(log((psic1(ig))/psic2(ig)))
!!!                   write(*,*) 'psi element product, ratio,', (enl1)
!!                 ENDDO
!!                 CALL invfft ('Wave', psic2, dffts)
!!                 CALL invfft ('Wave', psic1, dffts)
!!vgk(*)=0.0
!!  Do inr=1,dffts%nnr
!!  Do inr=1,dffts%nnr
!!    CALL fft_index_to_3d (inr, dffts, irx,iry,irz, offrange)
!!    arg=((real(irx)/dffts%nr1*at(1,1)+real(iry)/dffts%nr2*at(1,2)+real(irz)/dffts%nr3*at(1,3))*(xk(1,ik)-xk(1,ik0)+g(1,ig)) +&
!!         (real(irx)/dffts%nr1*at(2,1)+real(iry)/dffts%nr2*at(2,2)+real(irz)/dffts%nr3*at(2,3))*(xk(2,ik)-xk(2,ik0)+g(2,ig)) +&
!!         (real(irx)/dffts%nr1*at(3,1)+real(iry)/dffts%nr2*at(3,2)+real(irz)/dffts%nr3*at(3,3))*(xk(3,ik)-xk(3,ik0)+g(3,ig)))&
!!         *tpi 
!!arg=-arg
!!    phase=CMPLX(COS(arg),SIN(arg),kind=dp)
!!    vgk(ig)=vgk(ig)+psic1(inr)*phase
!!    if (arg>=0 .or. arg<=1) then
!!    else
!!!      write(*,*) 'psiprod vgk',arg, phase, vgk(ig), auxr(inr)
!!!      write(*,*) 'psiprod nr1',dffts%nr1
!!!      write(*,*) 'psiprod nr2',dffts%nr2
!!!      write(*,*) 'psiprod nr3',dffts%nr3
!!!      write(*,*) 'psiprod ir3',real(irx)
!!!      write(*,*) 'psiprod ir3',real(iry)
!!!      write(*,*) 'psiprod ir3',real(irz)
!!!      write(*,*) 'psiprod g',g(3,ig)
!!    endif
!!    
!!  Enddo
!!ml=ml+psiprod(ig)*vgk(ig)
!!
!!write(*,*) 'psic1 transform', vgk(ig)
!!Enddo
!!vgk(*)=0.0
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!debug fft in one unit
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!psi=u*exp(i*k*x)
!!!!!!!!!!!!!!!!!!V_g=int V(r)*exp(-i*g*r)
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!
!!
!  Do inr=1,dffts%nnr
!    CALL fft_index_to_3d (inr, dffts, irx,iry,irz, offrange)
!    arg=((real(irx)/dffts%nr1*at(1,1)+real(iry)/dffts%nr2*at(1,2)+real(irz)/dffts%nr3*at(1,3))*(xk(1,ik)-xk(1,ik0)-g(1,ig)) +&
!         (real(irx)/dffts%nr1*at(2,1)+real(iry)/dffts%nr2*at(2,2)+real(irz)/dffts%nr3*at(2,3))*(xk(2,ik)-xk(2,ik0)-g(2,ig)) +&
!         (real(irx)/dffts%nr1*at(3,1)+real(iry)/dffts%nr2*at(3,2)+real(irz)/dffts%nr3*at(3,3))*(xk(3,ik)-xk(3,ik0)-g(3,ig)))&
!         *tpi 
!!arg=-arg
!!write(*,*)irx,iry,irz,inr
!    phase=CMPLX(COS(arg),SIN(arg),kind=dp)
!    vgk(ig)=vgk(ig)+auxr(inr)*phase
!    if (arg>=0 .or. arg<=1) then
!    else
!!      write(*,*) 'psiprod vgk',arg, phase, vgk(ig), auxr(inr)
!!      write(*,*) 'psiprod nr1',dffts%nr1
!!      write(*,*) 'psiprod nr2',dffts%nr2
!!      write(*,*) 'psiprod nr3',dffts%nr3
!!      write(*,*) 'psiprod ir3',real(irx)
!!      write(*,*) 'psiprod ir3',real(iry)
!!      write(*,*) 'psiprod ir3',real(irz)
!!      write(*,*) 'psiprod g',g(3,ig)
!    endif
!    
!  Enddo
!ml=ml+psiprod(ig)*vgk(ig)
!!write(*,*) 'psiprod vgk',psiprod(ig), vgk(ig)
!Enddo
!ml=ml/dffts%nnr
!mltot2=mltot2+ml*wg(ibnd,ik)!
!!write(*,*) 'psiprod',psiprod
!write(*,*) 'ml in kspace',ml, 'abs', abs(ml),log(ml) !,'mltot',mltot2
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!! Vl in kspace real
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!! vl in real super2prim, module
psiprod(:)=0.00
vgk_perturb(:)=0.00
ml=0
mltot=0
mltot1=0
d1=((1.0/dffts%nr1*at(1,1))*(xk(1,ik)-xk(1,ik0)) +&
    (1.0/dffts%nr1*at(2,1))*(xk(2,ik)-xk(2,ik0)) +&
    (1.0/dffts%nr1*at(3,1))*(xk(3,ik)-xk(3,ik0)) )*tpi 
d2=((1.0/dffts%nr2*at(1,2))*(xk(1,ik)-xk(1,ik0)) +&
    (1.0/dffts%nr2*at(2,2))*(xk(2,ik)-xk(2,ik0)) +&
    (1.0/dffts%nr2*at(3,2))*(xk(3,ik)-xk(3,ik0)) )*tpi 
d3=((1.0/dffts%nr3*at(1,3))*(xk(1,ik)-xk(1,ik0)) +&
    (1.0/dffts%nr3*at(2,3))*(xk(2,ik)-xk(2,ik0)) +&
    (1.0/dffts%nr3*at(3,3))*(xk(3,ik)-xk(3,ik0)) )*tpi 


!d1=((1.0/nr1_perturb*at_perturb(1,1))*(xk(1,ik)-xk(1,ik0)) +&
!    (1.0/nr1_perturb*at_perturb(2,1))*(xk(2,ik)-xk(2,ik0)) +&
!    (1.0/nr1_perturb*at_perturb(3,1))*(xk(3,ik)-xk(3,ik0)) )*tpi 
!d2=((1.0/nr2_perturb*at_perturb(1,2))*(xk(1,ik)-xk(1,ik0)) +&
!    (1.0/nr2_perturb*at_perturb(2,2))*(xk(2,ik)-xk(2,ik0)) +&
!    (1.0/nr2_perturb*at_perturb(3,2))*(xk(3,ik)-xk(3,ik0)) )*tpi 
!d3=((1.0/nr3_perturb*at_perturb(1,3))*(xk(1,ik)-xk(1,ik0)) +&
!    (1.0/nr3_perturb*at_perturb(2,3))*(xk(2,ik)-xk(2,ik0)) +&
!    (1.0/nr3_perturb*at_perturb(3,3))*(xk(3,ik)-xk(3,ik0)) )*tpi 
!
arg=0
inr=0
write(*,*) 'xk-xk01',xk(1,ik)-xk(1,ik0)
write(*,*) 'xk-xk02',xk(2,ik)-xk(2,ik0)
write(*,*) 'xk-xk03',xk(3,ik)-xk(3,ik0)
do irz =0, nr3_perturb-1
ir3mod=irz-(irz/(dffts%nr3))*dffts%nr3
do iry =0, nr2_perturb-1
ir2mod=iry-(iry/(dffts%nr2))*dffts%nr2
do irx =0, nr1_perturb-1
ir1mod=irx-(irx/(dffts%nr1))*dffts%nr1
!arg=tpi*(real(irx)/nr1_perturb*at_perturb(1,1)+real(iry)/nr2_perturb*at_perturb(1,2)&
!                                              +real(irz)/nr3_perturb*at_perturb(1,3))*(xk(1,ik)-xk(1,ik0)) +&
!    tpi*(real(irx)/nr1_perturb*at_perturb(2,1)+real(iry)/nr2_perturb*at_perturb(2,2)&
!                                              +real(irz)/nr3_perturb*at_perturb(2,3))*(xk(2,ik)-xk(2,ik0)) +&
!    tpi*(real(irx)/nr1_perturb*at_perturb(3,1)+real(iry)/nr2_perturb*at_perturb(3,2)&
!                                              +real(irz)/nr3_perturb*at_perturb(3,3))*(xk(3,ik)-xk(3,ik0))   

arg=irz*d3+iry*d2+irx*d1
!arg=ir3mod*d3+ir2mod*d2+ir1mod*d1

arg=tpi*(real(irx)/dffts%nr1*at(1,1)+real(iry)/dffts%nr2*at(1,2)+real(irz)/dffts%nr3*at(1,3))*(xk(1,ik)-xk(1,ik0)) +&
    tpi*(real(irx)/dffts%nr1*at(2,1)+real(iry)/dffts%nr2*at(2,2)+real(irz)/dffts%nr3*at(2,3))*(xk(2,ik)-xk(2,ik0)) +&
    tpi*(real(irx)/dffts%nr1*at(3,1)+real(iry)/dffts%nr2*at(3,2)+real(irz)/dffts%nr3*at(3,3))*(xk(3,ik)-xk(3,ik0))   
    phase=CMPLX(COS(arg),SIN(arg),kind=dp)
inr=inr+1
irnmod=(ir3mod)*dffts%nr1*dffts%nr2+(ir2mod)*dffts%nr1+ir1mod+1
ml=ml+CONJG(psic1(irnmod))*psic2(irnmod)*plot_perturb(inr)*phase
ml2=ml2+CONJG(psic1(irnmod))*psic2(irnmod)*plot_perturb(inr)*phase
mltot=mltot+CONJG(psic1(irnmod))*psic2(irnmod)*phase
mltot1=mltot1+CONJG(psic1(irnmod))*psic2(irnmod)
!write (*,*) 'iri',ir1mod,ir2mod,ir3mod
!write (*,*) 'grid ', irnmod
!write (*,*) 'psic1 ', psic1(irnmod)
!write (*,*) 'psic2 ', psic2(irnmod)
!write (*,*) 'arg', arg

if ( irnmod<0 .or. irnmod>dffts%nnr ) then
write (*,*) 'grid mismatch', irnmod
endif


   
enddo
enddo
enddo

ml=ml/nr1_perturb/nr2_perturb/nr3_perturb
write (*,*) 'ml super to primitive ki->kf',ik0,ik, ml, abs(ml), log(ml)
write (*,*) 'mlpsi*psi0 to primitive ki->kf',ik0,ik, mltot1, abs(mltot1), log(mltot1)
write (*,*) 'mlpsi*psi0*phase to primitive ki->kf',ik0,ik, mltot, abs(mltot), log(mltot)
write (*,*) 'modml super  ki->kf',ik0,ik, abs(ml)
!write(*,*) 'nrx_perturb',nr1_perturb,nr2_perturb,nr3_perturb
!write(*,*) 'nrx_perturb',at,at_perturb, alat
!write (*,*) 'dvgk', vgk(:)-vgk_perturb(:)
!write (*,*) 'vgk', vgk(:)
!write (*,*) 'vgk_perturb', vgk_perturb(:)
!write (*,*) 'sum dvgk', sum(vgk(:)-vgk_perturb(:))
!write(*,*) 'xk(ik)', xk(:,ik),ik
!write(*,*) 'xk(ik0)', xk(:,ik0),ik0

!!!!!! vl in real super2prim, module
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!



!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!! vl in kspace super2prim
!psiprod(:)=0.00
!vgk_perturb(:)=0.00
!ml=0
!Do ig=1,ngm
!  Do ig1=1,ngk(ik0)
!    Do ig2=1,npw
!      if (sum(abs(g(:,igk_k(ig1,ik0))-g(:,igk_k(ig2,ik))-g(:,ig)))<1e-4) then
!         psiprod(ig)=psiprod(ig)+conjg(evc1(ig1,ibnd0))*evc2(ig2,ibnd)
!      endif
!    Enddo
!  Enddo
!
!d1=((1.0/nr1_perturb*at_perturb(1,1))*(xk(1,ik)-xk(1,ik0)-g(1,ig)) +&
!    (1.0/nr1_perturb*at_perturb(2,1))*(xk(2,ik)-xk(2,ik0)-g(2,ig)) +&
!    (1.0/nr1_perturb*at_perturb(3,1))*(xk(3,ik)-xk(3,ik0)-g(3,ig)) )*tpi 
!d2=((1.0/nr1_perturb*at_perturb(1,2))*(xk(1,ik)-xk(1,ik0)-g(1,ig)) +&
!    (1.0/nr1_perturb*at_perturb(2,2))*(xk(2,ik)-xk(2,ik0)-g(2,ig)) +&
!    (1.0/nr1_perturb*at_perturb(3,2))*(xk(3,ik)-xk(3,ik0)-g(3,ig)) )*tpi 
!d3=((1.0/nr1_perturb*at_perturb(1,3))*(xk(1,ik)-xk(1,ik0)-g(1,ig)) +&
!    (1.0/nr1_perturb*at_perturb(2,3))*(xk(2,ik)-xk(2,ik0)-g(2,ig)) +&
!    (1.0/nr1_perturb*at_perturb(3,3))*(xk(3,ik)-xk(3,ik0)-g(3,ig)) )*tpi 
!!
!arg=0
!inr=0
!do irz =0, nr3_perturb-1
!do iry =0, nr2_perturb-1
!do irx =0, nr1_perturb-1
!arg=arg+d1
!    phase=CMPLX(COS(arg),SIN(arg),kind=dp)
!inr=inr+1
!    vgk_perturb(ig)=vgk_perturb(ig)+plot_perturb(inr)*phase
!
!
!!write (*,*) 'vgk', vgk(ig), inr,irx, iry,irz, plot_perturb(inr), phase
!   
!enddo
!!inr=inr+nr1_perturb
!arg=arg+d2
!enddo
!!inr=inr+nr1_perturb*nr2_perturb
!arg=arg+d3
!enddo
!
!
!!do irz =0, nr3_perturb-1
!!do iry =0, nr2_perturb-1
!!do irx =0, nr1_perturb-1
!!    arg=((real(irx)/nr1_perturb*at_perturb(1,1)&
!!         +real(iry)/nr2_perturb*at_perturb(1,2) &
!!         +real(irz)/nr3_perturb*at_perturb(1,3))*(xk(1,ik)-xk(1,ik0)-g(1,ig)) +&
!!         (real(irx)/nr1_perturb*at_perturb(2,1)&
!!         +real(iry)/nr2_perturb*at_perturb(2,2)&
!!         +real(irz)/nr3_perturb*at_perturb(2,3))*(xk(2,ik)-xk(2,ik0)-g(2,ig)) +&
!!         (real(irx)/nr1_perturb*at_perturb(3,1)&
!!         +real(iry)/nr2_perturb*at_perturb(3,2)&
!!         +real(irz)/nr3_perturb*at_perturb(3,3))*(xk(3,ik)-xk(3,ik0)-g(3,ig)))&
!!         *tpi 
!!!arg=-arg
!!!arg=arg/alat
!!    phase=CMPLX(COS(arg),SIN(arg),kind=dp)
!!    !inr=(irx)*nr3_perturb*nr2_perturb+(iry)*nr3_perturb+irz+1
!!    inr=(irz)*nr1_perturb*nr2_perturb+(iry)*nr1_perturb+irx+1
!!    !inr=(irz-1)*nr1_perturb*nr2_perturb+(iry-1)*nr1_perturb+irx
!!    vgk_perturb(ig)=vgk_perturb(ig)+plot_perturb(inr)*phase
!!
!!
!!!write (*,*) 'vgk', vgk(ig), inr,irx, iry,irz, plot_perturb(inr), phase
!!   
!!enddo
!!enddo
!!enddo
!!
!ml=ml+psiprod(ig)*vgk_perturb(ig)
!write (*,*) 'step ig',ig, ml, vgk_perturb(ig),psiprod(ig)
!enddo
!ml=ml/nr1_perturb/nr2_perturb/nr3_perturb
!write(*,*) 'psiprod',psiprod
!write(*,*) 'g()',g
!write(*,*) 'size g()',size(g)
!
!write (*,*) 'ml super to primitive', ml, abs(ml), log(ml)
!write (*,*) 'modmlk super to primitive',  abs(ml), log(ml)
!write(*,*) 'nrx_perturb',nr1_perturb,nr2_perturb,nr3_perturb
!write(*,*) 'nrx_perturb',at,at_perturb, alat
!!write (*,*) 'dvgk', vgk(:)-vgk_perturb(:)
!!write (*,*) 'vgk', vgk(:)
!!write (*,*) 'vgk_perturb', vgk_perturb(:)
!write (*,*) 'sum dvgk', sum(vgk(:)-vgk_perturb(:))
!!write(*,*) 'xk(ik)', xk(:,ik),ik
!!write(*,*) 'xk(ik0)', xk(:,ik0),ik0
!
!!!!!!!! vl in kspace super2prim
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!




!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!11
!  rewind (iunplot)
!  if (iflag > 0) then
!     write (iunplot, '(a)') title
!     write (iunplot, '(8i8)') nr1x, nr2x, nr3x, nr1, nr2, nr3, nat, ntyp
!     write (iunplot, '(i6,2x,6f16.8)') ibrav, celldm
!     if (ibrav == 0) then
!        do i = 1,3
!           write ( iunplot, * ) ( at(ipol,i),ipol=1,3 )
!        enddo
!     endif
!     write (iunplot, '(3f20.10,i6)') gcutm, dual, ecut, plot_num
!     write (iunplot, '(i4,3x,a2,3x,f5.2)') &
!          (nt, atm (nt), zv (nt), nt=1, ntyp)
!     write (iunplot, '(i4,3x,3f15.9,3x,i2)') (na, &
!          (tau (ipol, na), ipol = 1, 3), ityp (na), na = 1, nat)
!     write (iunplot, '(5(1pe17.9))') (plot (ir) , ir = 1, nr1x * nr2x * nr3)
!  else
!     read (iunplot, '(a)') title
!     read (iunplot, * ) nr1x, nr2x, nr3x, nr1, nr2, nr3, nat, ntyp
!     read (iunplot, * ) ibrav, celldm
!     if (ibrav == 0) then
!        do i = 1,3
!           read ( iunplot, * ) ( at(ipol,i),ipol=1,3 )
!        enddo
!     endif
!     read (iunplot, * ) gcutm, dual, ecut, plot_num
!     read (iunplot, '(i4,3x,a2,3x,f5.2)') &
!             (ndum, atm(nt), zv(nt), nt=1, ntyp)
!     read (iunplot, *) (ndum,  (tau (ipol, na), ipol = 1, 3), &
!             ityp(na), na = 1, nat)
!     read (iunplot, * ) (plot (ir), ir = 1, nr1x * nr2x * nr3)
!  endif

 
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!11
!!!! Vl
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!if (ibnd==1)then
!!write(*,*) 'evc', evc1(:,1)
!!write(*,*) 'absevc', abs(evc1(:,1))
!!write(*,*) 'nl',dffts%nl (: )
!!write(*,*) 'igk_k(:,ik)',igk_k(:,ik) 
!endif
!!ml=0
!!mltot=0
!                 psic2(1:dffts%nnr) = (0.d0,0.d0)
!                 psic1(1:dffts%nnr) = (0.d0,0.d0)
!!write(*,*) 'evc ik',ik,'ibnd',ibnd
!                 DO ig = 1, npw
!                    psic2 (dffts%nl (igk_k(ig,ik) ) ) = evc2 (ig, ibnd)
!!write(*,*) 'absevc evc', abs(evc2(ig,ibnd)),evc2(ig,ibnd)
!!write(*,*) 'nl', dffts%nl(ig)
!!write(*,*) 'ig', ig
!!write(*,*) 'g', ( xk(1,ik) + g(1,igk_k(ig,ik)) )* tpiba
!!write(*,*) 'g', ( xk(2,ik) + g(2,igk_k(ig,ik)) ) * tpiba
!!write(*,*) 'g', ( xk(3,ik) + g(3,igk_k(ig,ik)) )  * tpiba
!!write(*,*) 'g',  g(1,igk_k(ig,ik)) 
!!write(*,*) 'g',  g(2,igk_k(ig,ik)) 
!!write(*,*) 'g',  g(3,igk_k(ig,ik)) 
!!write(*,*) 'xk', ( xk(1,ik)  )* tpiba
!!write(*,*) 'xk', ( xk(2,ik)  ) * tpiba
!!write(*,*) 'xk', ( xk(3,ik)  )  * tpiba
!                 ENDDO
!                 DO ig = 1, ngk(ik0)
!                    psic1 (dffts%nl (igk_k(ig,ik0) ) ) = evc (ig, ibnd0)
!                 ENDDO
!                 CALL invfft ('Wave', psic1, dffts)
!!write (*,*) 'evc1', evc1
!!write (*,*) 'psic1 ', psic1(:)
!!write (*,*) 'psic1 ', psic1(1:10)
!!write (*,*) 'log psic1 ', log(psic1(1:10))
!!write (*,*) 'psic1 ',  psic1(8001:8010)
!!write(*,*) 'psic'
!!                 DO ig = 1, dffts%nnr
!!write(*,*) 'absevc', abs(psic2(ig)),psic2(ig)
!!                 ENDDO
!
!!Do ix0=1,dffts%nr1
!!Do iy0=1,dffts%nr2
!!Do iz0=1,dffts%nr3
!!   
!!
!!!        ikpsi0=(ix0-1)*dffts%nry*dffts%nrz+(iy0-1)*dffts%nrz+iz0
!!
!!vlfft=0
!!Do ig=1,dffts%nnr
!!    CALL fft_index_to_3d (ikpsi0, dffts, irx,iry,irz, offrange)
!!arg=2*3.141592653*(real(irx)/dffts%nr1*at(1,1)+real(iry)/dffts%nr2*at(1,2)+real(irz)/dffts%nr3*at(1,3))*(xk(1,ik)-xk(1,ik0)+ix0) +&
!!    2*3.141592653*(real(irx)/dffts%nr1*at(2,1)+real(iry)/dffts%nr2*at(2,2)+real(irz)/dffts%nr3*at(2,3))*(xk(2,ik)-xk(2,ik0)+iy0) +&
!!    2*3.141592653*(real(irx)/dffts%nr1*at(3,1)+real(iry)/dffts%nr2*at(3,2)+real(irz)/dffts%nr3*at(3,3))*(xk(3,ik)-xk(3,ik0)+iz0)   
!!phase=CMPLX(COS(arg),SIN(arg),kind=dp)
!!vlfft=vlfft+vrs(ig,1)*phase
!!enddo
!!vlfft=vlfft/dffts%nnr
!!
!!     Do ix1=1,dffts%nr1
!!     Do iy1=1,dffts%nr2
!!     Do iz1=1,dffts%nr3
!!        ikpsi1=(ix1-1)*dffts%nr2*dffts%nr3+(iy1-1)*dffts%nr3+iz1
!!        ix2=(ix1-ix0)
!!        iy2=(iy1-iy0)
!!        iz2=(iz1-iz0)
!!if (ix2<=dffts%nr1 .and. ix2>0 .and. iy2<=dffts%nr2 .and. iy2>0 .and. iz2<=dffts%nr3 .and. iz2>0 ) then
!!        ikpsi2=(ix2-1)*dffts%nr2*dffts%nr3+(iy2-1)*dffts%nr3+iz2
!!        ml=ml+psic1(ikpsi1)*conjg( psic2(ikpsi2))*vlfft
!!endif
!!     ENDDO
!!     ENDDO
!!     ENDDO
!!
!!ENDDO
!!ENDDO
!!ENDDO
!!
!!!!! Vl
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


  END SUBROUTINE calcmdefect_ml

  !
  SUBROUTINE calcmdefect_mnl(ibnd0,ibnd,ik0,ik)
!      USE becmod, ONLY: becp,becp1,becp2,becp_perturb,becp1_perturb,becp2_perturb, calbec, allocate_bec_type, deallocate_bec_type
      USE cell_base,       ONLY : alat, ibrav, omega, at, bg, celldm, wmass
      INTEGER :: ibnd, ik, ik0,ibnd0
mnl=0


            IF( nks > 1 ) CALL get_buffer (evc, nwordwfc, iunwfc, ik )

     npw = ngk(ik)
            CALL init_us_2 (npw, igk_k(1,ik), xk (1, ik), vkb)
            CALL calbec ( npw, vkb, evc, becp )

        CALL get_buffer ( evc1, nwordwfc, iunwfc, ik0 )
        CALL get_buffer ( evc2, nwordwfc, iunwfc, ik )




!!! Vnl: Ry

enl1=0
!            CALL calbec ( npw, vkb, evc, becp )

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!pp

!DO na = 1, nat
!           ! ordering: first all betas for atoms of type 1
!           !           then  all betas for atoms of type 2  and so on
!           IF (ityp(na) == nt) THEN
!              !
!              arg = ( q_(1) * tau(1,na) + &
!                      q_(2) * tau(2,na) + &
!                      q_(3) * tau(3,na) ) * tpi
!              phase = CMPLX( COS(arg), -SIN(arg) ,KIND=DP)
!              !
!              DO ig = 1, realblocksize
!                 ig_orig = (iblock-1)*blocksize+ig
!                 sk(ig) = eigts1(mill(1,igk_(ig_orig)), na) * &
!                          eigts2(mill(2,igk_(ig_orig)), na) * &
!                          eigts3(mill(3,igk_(ig_orig)), na)
!              ENDDO
!              !
!              DO ih = 1, nh(nt)
!                 jkb = jkb + 1
!                 pref = (0.d0, -1.d0)**nhtol(ih, nt) * phase
!                 DO ig = 1, realblocksize
!                    vkb_((iblock-1)*blocksize+ig, jkb) = vkb1(ig,ih) * sk(ig) * pref
!                 ENDDO
!                 ! clean up garbage in the last block
!                 IF (iblock == numblock) THEN
!                    DO ig = npw_+1, npwx
!                       vkb_(ig, jkb) = (0.0_DP, 0.0_DP)
!                    ENDDO
!                 ENDIF
!              ENDDO
!              !
!           ENDIF
!           !
!        ENDDO

!!! !!!!!!!!!!

            !CALL init_us_2 (npw, igk_k(1,ik), xk (1, ik), vkb)

write (*,*) 'primitive', npw, igk_k(1,ik), xk (1, ik)
         npw = ngk(ik0)
        CALL get_buffer ( evc1, nwordwfc, iuntmp, ik0 )
        CALL get_buffer ( evc2, nwordwfc, iuntmp, ik )
            CALL init_us_2 (npw, igk_k(1,ik0), xk (1, ik0), vkb)
            CALL calbec ( npw, vkb, evc1, becp1 )
         npw = ngk(ik)
            CALL init_us_2 (npw, igk_k(1,ik), xk (1, ik), vkb)
            CALL calbec ( npw, vkb, evc2, becp2 )
               ijkb0 = 0
               DO nt = 1, ntyp
                  DO na = 1, nat
                    arg=(xk(1,ik)*tau(1,na)+xk(2,ik)*tau(2,na)+xk(3,ik)*tau(3,na))*tpi/alat
                    arg=arg-(xk(1,ik0)*tau(1,na)+xk(2,ik0)*tau(2,na)+xk(3,ik0)*tau(3,na))*tpi/alat
              phase = CMPLX( COS(arg), -SIN(arg) ,KIND=DP)
              phase = 1
                     IF(ityp (na) == nt)THEN
                        DO ih = 1, nh (nt)
                           ikb = ijkb0 + ih
                           IF(gamma_only)THEN
                              enl1=enl1+becp1%r(ikb,ibnd0)*becp2%r(ikb,ibnd) &
                                 * dvan(ih,ih,nt)
                           ELSE
                              enl1=enl1+conjg(becp1%k(ikb,ibnd0))*becp2%k(ikb,ibnd) &
                                 * dvan(ih,ih,nt)
                           ENDIF
                           DO jh = ( ih + 1 ), nh(nt)
                              jkb = ijkb0 + jh
                              IF(gamma_only)THEN
                                 enl1=enl1 + &
                                    (becp1%r(ikb,ibnd0)*becp2%r(jkb,ibnd)+&
                                       becp1%r(jkb,ibnd0)*becp2%r(ikb,ibnd))&
                                     * dvan(ih,jh,nt)
                              ELSE
                                 enl1=enl1 + &
                                    (conjg(becp1%k(ikb,ibnd0))*becp2%k(jkb,ibnd)+&
                                       conjg(becp1%k(jkb,ibnd0))*becp2%k(ikb,ibnd))&
                                     * dvan(ih,jh,nt) *phase
                              ENDIF

                           ENDDO

                        ENDDO
                        ijkb0 = ijkb0 + nh (nt)
                     ENDIF
                  ENDDO
               ENDDO
mnltot=mnltot+enl1*wg(ibnd,ik)!
 
!if(ibnd .eq.9) 
write (stdout,*) 'ik0,ik,ibnd: original', ik0,ik, ibnd, 'mnl', enl1,'abs mnl', abs(enl1),'mnltot', mnltot
write (stdout,*) 'modmnl ik0,ik original', ik0,ik, abs(enl1)
!!! Vnl
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!Mnl
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!Mnl in super use primitive
mnl=0
        CALL get_buffer ( evc1, nwordwfc, iuntmp, ik0 )
        CALL get_buffer ( evc2, nwordwfc, iuntmp, ik )
!
!write (*,*) 'primitive', npw, igk_k(1,ik), xk (1, ik)
         npw = ngk(ik0)
!nat_perturb=1
            !CALL init_us_2 (npw, igk_k(1,ik0), xk (1, ik0), vkb)
write (*,*) '1 ', shape(vkb_perturb),'becp',shape(becp1_perturb)
write (*,*) 'nat_perturb ', shape(nat_perturb),nat_perturb
write (*,*) ',ityp_perturb, ', shape(ityp_perturb),ityp_perturb
write (*,*) 'tau_perturb, ', shape(tau_perturb),tau_perturb
write (*,*) 'nkb_perturb ', shape(nkb_perturb),nkb_perturb
!write (*,*) '1 ', shape(vkb),'becp',shape(becp1_perturb)
            CALL init_us_2_perturb (npw, igk_k(1,ik0), xk (1, ik0), vkb_perturb,nat_perturb,ityp_perturb,tau_perturb,nkb_perturb)
write (*,*) '1 ', shape(vkb_perturb),shape(evc1),npw,npwx
            CALL calbec ( npw, vkb_perturb, evc1, becp1_perturb )
!write (*,*) 'evc1 ', evc1
!write (*,*) 'vkb ', vkb
!write (*,*) '1 ', shape(vkb_perturb),shape(becp1_perturb)
         npw = ngk(ik)
            CALL init_us_2_perturb (npw, igk_k(1,ik), xk (1, ik), vkb_perturb,nat_perturb,ityp_perturb,tau_perturb,nkb_perturb)
            CALL calbec ( npw, vkb_perturb, evc2, becp2_perturb )

!write (*,*) 'becp1 ', shape(vkb),shape(becp1)
!write (*,*) 'becp1 ', shape(vkb),shape(becp1)
!write (*,*) '1 ', shape(vkb_perturb),shape(becp1_perturb)
!write (*,*) 'evc2 ', evc2
!write (*,*) 'vkb ', vkb
            !CALL init_us_2 (npw, igk_k(1,ik), xk (1, ik), vkb)
!evc1(:,:)=0.0
!        CALL open_buffer ( iuntmp, 'wfctemp', nwordwfc, io_level, exst )
!        CALL save_buffer ( evc, nwordwfc, iuntmp, ik0 )
!        CALL get_buffer ( evc1, nwordwfc, iuntmp, ik0 )
!write (*,*) 'evc1', evc1
!write (*,*) 'evc ', evc
!write (*,*) 'log evc1', log(evc1)
!write (*,*) 'log evc ', log(evc)
!write (*,*) 'igk_k ', igk_k(:,:)
!write (*,*) 'igtog ', igtog(:)
!write (*,*) 'gtoig ', gtoig(:)
!write (*,*) 'tau ', tau

!            CALL calbec ( npw, vkb, evc1, becp1 )
!            CALL calbec ( npw, vkb, evc2, becp2 )
               ijkb0 = 0
!write (stdout,*) 'mnl: ',mnl
               DO nt_perturb = 1, ntyp_perturb
                  DO na_perturb = 1, nat_perturb
                    arg=(xk(1,ik)*tau(1,na_perturb)+xk(2,ik)*tau(2,na_perturb)+xk(3,ik)*tau(3,na_perturb))*tpi/alat
                    arg=arg-(xk(1,ik0)*tau(1,na_perturb)+xk(2,ik0)*tau(2,na_perturb)+xk(3,ik0)*tau(3,na_perturb))*tpi/alat
              phase = CMPLX( COS(arg), -SIN(arg) ,KIND=DP)
              phase = 1
                     IF(ityp_perturb (na_perturb) == nt_perturb)THEN
                        DO ih = 1, nh (nt_perturb)
                           ikb = ijkb0 + ih
                           IF(gamma_only)THEN
                              mnl=mnl+becp1%r(ikb,ibnd0)*becp2%r(ikb,ibnd) &
                                 * dvan(ih,ih,nt_perturb)
                           ELSE
                              mnl=mnl+conjg(becp1_perturb%k(ikb,ibnd0))*becp2_perturb%k(ikb,ibnd) &
                                 * dvan(ih,ih,nt_perturb)
                           ENDIF
!write (stdout,*) 'mnl: ',mnl
!write (stdout,*) 'becp1: ',becp1%k(ikb,ibnd0)
!write (stdout,*) 'becp2: ',becp2%k(ikb,ibnd)
!write (stdout,*) 'dvan: ', dvan(ih,ih,nt_perturb)
                           DO jh = ( ih + 1 ), nh(nt_perturb)
                              jkb = ijkb0 + jh
                              IF(gamma_only)THEN
                                 mnl=mnl + &
                                    (becp1%r(ikb,ibnd0)*becp2%r(jkb,ibnd)+&
                                       becp1%r(jkb,ibnd0)*becp2%r(ikb,ibnd))&
                                     * dvan(ih,jh,nt_perturb)
                              ELSE
                                 mnl=mnl + &
                                    (conjg(becp1_perturb%k(ikb,ibnd0))*becp2_perturb%k(jkb,ibnd)+&
                                       conjg(becp1_perturb%k(jkb,ibnd0))*becp2_perturb%k(ikb,ibnd))&
                                     * dvan(ih,jh,nt_perturb) *phase
                              ENDIF
!write (stdout,*) 'mnl: ',mnl

                           ENDDO

                        ENDDO
                        ijkb0 = ijkb0 + nh (nt_perturb)
                     ENDIF
                  ENDDO
               ENDDO
mnltot=mnltot+mnl*wg(ibnd,ik)!
 
!mnl=mnl/nr1_perturb/nr2_perturb/nr3_perturb
!if(ibnd .eq.9) 
write (stdout,*) 'ik0,ik,ibnd: super2primitive', ik0, ik, ibnd, 'mnl', mnl,'abs mnl', abs(mnl),'mnltot', mnltot
write (stdout,*) 'modmnl ik0,ik super2primitive', ik0,ik, abs(enl1)
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!Mnl super use primitive
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!Mnl in super use primitive old
!mnl=0
!!write (*,*) 'primitive', npw, igk_k(1,ik), xk (1, ik)
!            CALL init_us_2 (npw, igk_k(1,ik0), xk (1, ik0), vkb)
!            CALL calbec ( npw, vkb, evc1, becp1 )
!            CALL init_us_2 (npw, igk_k(1,ik), xk (1, ik), vkb)
!            CALL calbec ( npw, vkb, evc2, becp2 )
!            !CALL init_us_2 (npw, igk_k(1,ik), xk (1, ik), vkb)
!!evc1(:,:)=0.0
!!        CALL open_buffer ( iuntmp, 'wfctemp', nwordwfc, io_level, exst )
!!        CALL save_buffer ( evc, nwordwfc, iuntmp, ik0 )
!!        CALL get_buffer ( evc1, nwordwfc, iuntmp, ik0 )
!!write (*,*) 'evc1', evc1
!!write (*,*) 'evc ', evc
!!write (*,*) 'log evc1', log(evc1)
!!write (*,*) 'log evc ', log(evc)
!!write (*,*) 'igk_k ', igk_k(:,:)
!!write (*,*) 'igtog ', igtog(:)
!!write (*,*) 'gtoig ', gtoig(:)
!!write (*,*) 'tau ', tau
!
!!            CALL calbec ( npw, vkb, evc1, becp1 )
!!            CALL calbec ( npw, vkb, evc2, becp2 )
!               ijkb0 = 0
!!write (stdout,*) 'mnl: ',mnl
!               DO nt_perturb = 1, ntyp_perturb
!                  DO na_perturb = 1, nat_perturb
!                    arg=(xk(1,ik)*tau(1,na)+xk(2,ik)*tau(2,na)+xk(3,ik)*tau(3,na))*tpi/alat
!                    arg=arg-(xk(1,ik0)*tau(1,na)+xk(2,ik0)*tau(2,na)+xk(3,ik0)*tau(3,na))*tpi/alat
!              phase = CMPLX( COS(arg), -SIN(arg) ,KIND=DP)
!              phase = 1
!                     IF(ityp_perturb (na_perturb) == nt_perturb)THEN
!                        DO ih = 1, nh (nt_perturb)
!                           ikb = ijkb0 + ih
!                           IF(gamma_only)THEN
!                              mnl=mnl+becp1%r(ikb,ibnd0)*becp2%r(ikb,ibnd) &
!                                 * dvan(ih,ih,nt_perturb)
!                           ELSE
!                              mnl=mnl+conjg(becp1%k(ikb,ibnd0))*becp2%k(ikb,ibnd) &
!                                 * dvan(ih,ih,nt_perturb)
!                           ENDIF
!!write (stdout,*) 'mnl: ',mnl
!!write (stdout,*) 'becp1: ',becp1%k(ikb,ibnd0)
!!write (stdout,*) 'becp2: ',becp2%k(ikb,ibnd)
!!write (stdout,*) 'dvan: ', dvan(ih,ih,nt_perturb)
!                           DO jh = ( ih + 1 ), nh(nt_perturb)
!                              jkb = ijkb0 + jh
!                              IF(gamma_only)THEN
!                                 mnl=mnl + &
!                                    (becp1%r(ikb,ibnd0)*becp2%r(jkb,ibnd)+&
!                                       becp1%r(jkb,ibnd0)*becp2%r(ikb,ibnd))&
!                                     * dvan(ih,jh,nt_perturb)
!                              ELSE
!                                 mnl=mnl + &
!                                    (conjg(becp1%k(ikb,ibnd0))*becp2%k(jkb,ibnd)+&
!                                       conjg(becp1%k(jkb,ibnd0))*becp2%k(ikb,ibnd))&
!                                     * dvan(ih,jh,nt_perturb) *phase
!                              ENDIF
!!write (stdout,*) 'mnl: ',mnl
!
!                           ENDDO
!
!                        ENDDO
!                        ijkb0 = ijkb0 + nh (nt_perturb)
!                     ENDIF
!                  ENDDO
!               ENDDO
!mnltot=mnltot+mnl*wg(ibnd,ik)!
! 
!!if(ibnd .eq.9) 
!write (stdout,*) 'ik,ibnd: old', ik, ibnd, 'mnl', mnl,'abs mnl', abs(mnl),'mnltot', mnltot
!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!Mnl super use primitive old
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!



  END SUBROUTINE calcmdefect_mnl


  SUBROUTINE calcmdefect_charge(ibnd0,ibnd,ik0,ik)
      INTEGER :: ibnd, ik, ik0,ibnd0








k0screen=tpiba/10
k0screen=tpiba/100





!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!! level 2

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!! Vl real space direct charged
k0screen=tpiba/100
        auxr(:) =  vrs(:,1)
ml=0
mltot=0
                 psic2(1:dffts%nnr) = (0.d0,0.d0)
                 psic1(1:dffts%nnr) = (0.d0,0.d0)
                 DO ig = 1, ngk(ikk)
                    psic2 (dffts%nl (igk_k(ig,ikk) ) ) = evc2 (ig, ibnd)
                 ENDDO
                 DO ig = 1, ngk(ik0)
                    psic1 (dffts%nl (igk_k(ig,ik0) ) ) = evc1 (ig, ibnd0)
                 ENDDO
psiprod(:)=psic1(:)
                 CALL invfft ('Wave', psic2, dffts)
                 CALL invfft ('Wave', psic1, dffts)


ml=0
ml1=0
ml2=0
mlat1(:)=0
mlat2(:)=0
mltot=0
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!M=1/(|r|) sum_r u1^dagger(r)*u2(r)
DO ig = 1, dffts%nnr
    CALL fft_index_to_3d (ig, dffts, irx,iry,irz, offrange)
!write (*,*) 'irx,iry,irz', irx,iry,irz, ig

arg=tpi*(real(irx)/dffts%nr1*at(1,1)+real(iry)/dffts%nr2*at(1,2)+real(irz)/dffts%nr3*at(1,3))*(xk(1,ik)-xk(1,ik0)) +&
    tpi*(real(irx)/dffts%nr1*at(2,1)+real(iry)/dffts%nr2*at(2,2)+real(irz)/dffts%nr3*at(2,3))*(xk(2,ik)-xk(2,ik0)) +&
    tpi*(real(irx)/dffts%nr1*at(3,1)+real(iry)/dffts%nr2*at(3,2)+real(irz)/dffts%nr3*at(3,3))*(xk(3,ik)-xk(3,ik0))   

phase=CMPLX(COS(arg),SIN(arg),kind=dp)

!d1=((1.0/dffts%nr1*at(1,1))*(xk(1,ik)-xk(1,ik0)) +&
!    (1.0/dffts%nr1*at(2,1))*(xk(2,ik)-xk(2,ik0)) +&
!    (1.0/dffts%nr1*at(3,1))*(xk(3,ik)-xk(3,ik0)) )*tpi 
!d2=((1.0/dffts%nr2*at(1,2))*(xk(1,ik)-xk(1,ik0)) +&
!    (1.0/dffts%nr2*at(2,2))*(xk(2,ik)-xk(2,ik0)) +&
!    (1.0/dffts%nr2*at(3,2))*(xk(3,ik)-xk(3,ik0)) )*tpi 
!d3=((1.0/dffts%nr3*at(1,3))*(xk(1,ik)-xk(1,ik0)) +&
!    (1.0/dffts%nr3*at(2,3))*(xk(2,ik)-xk(2,ik0)) +&
!    (1.0/dffts%nr3*at(3,3))*(xk(3,ik)-xk(3,ik0)) )*tpi 


rmod=alat*((real(irx)/dffts%nr1*at(1,1)+real(iry)/dffts%nr2*at(1,2)+real(irz)/dffts%nr3*at(1,3))**2 +&
           (real(irx)/dffts%nr1*at(2,1)+real(iry)/dffts%nr2*at(2,2)+real(irz)/dffts%nr3*at(2,3))**2 +&
           (real(irx)/dffts%nr1*at(3,1)+real(iry)/dffts%nr2*at(3,2)+real(irz)/dffts%nr3*at(3,3))**2)**0.5
!arg=2*3.14/tpiba*((real(irx)/dffts%nr1*at(1,1)+real(iry)/dffts%nr2*at(1,2)+real(irz)/dffts%nr3*at(1,3))**2 +&
!                  (real(irx)/dffts%nr1*at(2,1)+real(iry)/dffts%nr2*at(2,2)+real(irz)/dffts%nr3*at(2,3))**2 +&
!                  (real(irx)/dffts%nr1*at(3,1)+real(iry)/dffts%nr2*at(3,2)+real(irz)/dffts%nr3*at(3,3))**2)**0.5
if(rmod>0) then
    ml=ml+CONJG(psic1(ig))*psic2(ig)*phase*1/rmod
    mltot=mltot+CONJG(psic1(ig))*psic2(ig)*phase*1/rmod*exp(-k0screen*rmod)

    mlat1(irz+1)=mlat1(irz+1)+CONJG(psic1(ig))*psic2(ig)*phase*1/rmod
    mlat2(irz+1)=mlat2(irz+1)+CONJG(psic1(ig))*psic2(ig)*phase*1/rmod*exp(-k0screen*rmod)
!                      write (*,*) 'step ml', ml,-k0screen,rmod, exp(-k0screen*rmod)
!                      write (*,*) 'step ml', irx, iry, irz, dffts%nr1, dffts%nr2, dffts%nr3, alat,tpiba
!                      write (*,*) 'step mltot', mltot
endif
ENDDO


ml=ml/dffts%nnr
mltot=mltot/dffts%nnr
write (stdout,*) 'charged real3D primitive ns' ,  abs(ml)     ,ik, ik0
write (stdout,*) 'charged real3D primitive s'  ,  abs(mltot)  ,ik, ik0

do ig=1,dffts%nr3
write (stdout,*) 'charged real2D primitive ns' ,  abs(sum(mlat1(1:ig)))    ,ik, ik0 , 'Nz', ig
write (stdout,*) 'charged real2D primitive s'  ,  abs(sum(mlat2(1:ig)))    ,ik, ik0 , 'Nz', ig
enddo

do ig=1,dffts%nr3
write (stdout,*) 'charged real2D slice primitive ns' ,  abs(mlat1(ig))    ,ik, ik0 , 'Nz', ig
write (stdout,*) 'charged real2D slice primitive s'  ,  abs(mlat2(ig))    ,ik, ik0 , 'Nz', ig
enddo
!write (stdout,*) 'charged1 M=1/(|r|) sum_r u1^dagger(r)*u2(r)*exp(i dk r)', ik0, ik, ibnd0, ibnd, 'ml', ml , abs(ml),log(ml)!, arg, 'mltot', mltot1
!write (stdout,*) 'charged2 M=1/(|r|) sum_r u1^dagger(r)*u2(r)*exp(i dk r)exp(-k0 r)'&
!, ik0, ik, ibnd0, ibnd, 'ml', mltot , abs(mltot),log(mltot)!, arg, 'mltot', mltot1
!write (stdout,*) 'charged eq1 primitive 9 M=1/(|r|)sum_ru1^dagger(r)*u2(r)*exp(idkr)', abs(ml)
!write (stdout,*) 'charged eq1 primitive screened9 M=1/(|r|)sum_ru1^dagger(r)*u2(r)*exp(idkr)exp(-k0r)', abs(mltot)
arg=0
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!M=1/(|r|) sum_r u1^dagger(r)*u2(r) supercell
nscx=9
nscy=9
mltot1=0

ml=0
ml1=0
ml2=0
mlat1(:)=0
mlat2(:)=0
mltot=0
!
DO ig = 1, dffts%nnr
    CALL fft_index_to_3d (ig, dffts, irx,iry,irz, offrange)
!d1=((1.0/dffts%nr1*at(1,1))*(xk(1,ik)-xk(1,ik0)) +&
!    (1.0/dffts%nr1*at(2,1))*(xk(2,ik)-xk(2,ik0)) +&
!    (1.0/dffts%nr1*at(3,1))*(xk(3,ik)-xk(3,ik0)) )*tpi 
!d2=((1.0/dffts%nr2*at(1,2))*(xk(1,ik)-xk(1,ik0)) +&
!    (1.0/dffts%nr2*at(2,2))*(xk(2,ik)-xk(2,ik0)) +&
!    (1.0/dffts%nr2*at(3,2))*(xk(3,ik)-xk(3,ik0)) )*tpi 
!d3=((1.0/dffts%nr3*at(1,3))*(xk(1,ik)-xk(1,ik0)) +&
!    (1.0/dffts%nr3*at(2,3))*(xk(2,ik)-xk(2,ik0)) +&
!    (1.0/dffts%nr3*at(3,3))*(xk(3,ik)-xk(3,ik0)) )*tpi 

do iscx =0,nscx-1
do iscy =0,nscy-1

arg=tpi*((real(irx)/dffts%nr1+iscx)*at(1,1)+(real(iry)/dffts%nr2+iscy)*at(1,2)+real(irz)/dffts%nr3*at(1,3))*(xk(1,ik)-xk(1,ik0)) +&
    tpi*((real(irx)/dffts%nr1+iscx)*at(2,1)+(real(iry)/dffts%nr2+iscy)*at(2,2)+real(irz)/dffts%nr3*at(2,3))*(xk(2,ik)-xk(2,ik0)) +&
    tpi*((real(irx)/dffts%nr1+iscx)*at(3,1)+(real(iry)/dffts%nr2+iscy)*at(3,2)+real(irz)/dffts%nr3*at(3,3))*(xk(3,ik)-xk(3,ik0))   

phase=CMPLX(COS(arg),SIN(arg),kind=dp)
mltot1=mltot1+phase
rmod=alat*(((real(irx)/dffts%nr1+iscx)*at(1,1)+(real(iry)/dffts%nr2+iscy)*at(1,2)+real(irz)/dffts%nr3*at(1,3))**2 +&
           ((real(irx)/dffts%nr1+iscx)*at(2,1)+(real(iry)/dffts%nr2+iscy)*at(2,2)+real(irz)/dffts%nr3*at(2,3))**2 +&
           ((real(irx)/dffts%nr1+iscx)*at(3,1)+(real(iry)/dffts%nr2+iscy)*at(3,2)+real(irz)/dffts%nr3*at(3,3))**2)**0.5
if(rmod>0) then
                      ml=ml+CONJG(psic1(ig))*psic2(ig)*phase*1/rmod
                      mltot=mltot+CONJG(psic1(ig))*psic2(ig)*phase*1/rmod*exp(-k0screen*rmod)

                      mlat1(irz+1)=mlat1(irz+1)+CONJG(psic1(ig))*psic2(ig)*phase*1/rmod
                      mlat2(irz+1)=mlat2(irz+1)+CONJG(psic1(ig))*psic2(ig)*phase*1/rmod*exp(-k0screen*rmod)

endif

enddo
enddo
ENDDO
ml=ml/dffts%nnr
mltot=mltot/dffts%nnr
write (stdout,*) 'sum phase '  , ik,ik0,mltot1,  abs(mltot1)
write (stdout,*) 'charged real3D super ns' ,  abs(ml)     ,ik, ik0
write (stdout,*) 'charged real3D super s'  ,  abs(mltot)  ,ik, ik0
!write (stdout,*) 'charged real2D super ns' ,  abs(ml1)    ,ik, ik0
!write (stdout,*) 'charged real2D super s'  ,  abs(ml2)    ,ik, ik0

do ig=1,dffts%nr3
write (stdout,*) 'charged real2D super ns' ,  abs(sum(mlat1(1:ig)))    ,ik, ik0 , 'Nz', ig
write (stdout,*) 'charged real2D super s'  ,  abs(sum(mlat2(1:ig)))    ,ik, ik0 , 'Nz', ig
enddo

do ig=1,dffts%nr3
write (stdout,*) 'charged real2D slice super ns' ,  abs(mlat1(ig))    ,ik, ik0 , 'Nz', ig
write (stdout,*) 'charged real2D slice super s'  ,  abs(mlat2(ig))    ,ik, ik0 , 'Nz', ig
enddo

!write (stdout,*) 'charged1 M=1/(|r|) sum_r u1^dagger(r)*u2(r)*exp(i dk r)', ik0, ik, ibnd0, ibnd, 'ml', ml , abs(ml),log(ml)!, arg, 'mltot', mltot1
!write (stdout,*) 'charged2 M=1/(|r|) sum_r u1^dagger(r)*u2(r)*exp(i dk r)exp(-k0 r)'&
!, ik0, ik, ibnd0, ibnd, 'ml', mltot , abs(mltot),log(mltot)!, arg, 'mltot', mltot1
!write (stdout,*) 'charged eq1 primitive 9 M=1/(|r|)sum_ru1^dagger(r)*u2(r)*exp(idkr)', abs(ml)
!write (stdout,*) 'charged eq1 primitive screened9 M=1/(|r|)sum_ru1^dagger(r)*u2(r)*exp(idkr)exp(-k0r)', abs(mltot)
!arg=0
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!M=1/(|r|) sum_r u1^dagger(r)*u2(r) supercell
!nscx=9
!nscy=9
!mltot1=0
!
!DO ig = 1, dffts%nnr
!    CALL fft_index_to_3d (ig, dffts, irx,iry,irz, offrange)
!d1=((1.0/dffts%nr1*at(1,1))*(xk(1,ik)-xk(1,ik0)) +&
!    (1.0/dffts%nr1*at(2,1))*(xk(2,ik)-xk(2,ik0)) +&
!    (1.0/dffts%nr1*at(3,1))*(xk(3,ik)-xk(3,ik0)) )*tpi 
!d2=((1.0/dffts%nr2*at(1,2))*(xk(1,ik)-xk(1,ik0)) +&
!    (1.0/dffts%nr2*at(2,2))*(xk(2,ik)-xk(2,ik0)) +&
!    (1.0/dffts%nr2*at(3,2))*(xk(3,ik)-xk(3,ik0)) )*tpi 
!d3=((1.0/dffts%nr3*at(1,3))*(xk(1,ik)-xk(1,ik0)) +&
!    (1.0/dffts%nr3*at(2,3))*(xk(2,ik)-xk(2,ik0)) +&
!    (1.0/dffts%nr3*at(3,3))*(xk(3,ik)-xk(3,ik0)) )*tpi 
!
!do iscx =0,nscx-1
!do iscy =0,nscy-1
!
!arg=tpi*((real(irx)/dffts%nr1+iscx)*at(1,1)+(real(iry)/dffts%nr2+iscy)*at(1,2)+real(irz)/dffts%nr3*at(1,3))*(xk(1,ik)-xk(1,ik0)) +&
!    tpi*((real(irx)/dffts%nr1+iscx)*at(2,1)+(real(iry)/dffts%nr2+iscy)*at(2,2)+real(irz)/dffts%nr3*at(2,3))*(xk(2,ik)-xk(2,ik0)) +&
!!write (stdout,*) 'charged1 supercell 9 M=1/(|r|) sum_r u1^dagger(r)*u2(r)*exp(i dk r)'&
!!, ik0, ik, ibnd0, ibnd, 'ml', ml , abs(ml),log(ml)!, arg, 'mltot', mltot1
!!write (stdout,*) 'charged2 supercell 9 M=1/(|r|) sum_r u1^dagger(r)*u2(r)*exp(i dk r)exp(-k0 r)'&
!!, ik0, ik, ibnd0, ibnd, 'ml', mltot , abs(mltot),log(mltot)!, arg, 'mltot', mltot1
!!
!!write (stdout,*) 'charged eq1 supercell 9 M=1/(|r|)sum_ru1^dagger(r)*u2(r)*exp(idkr)', abs(ml)
!!write (stdout,*) 'charged eq1 supercell screened9 M=1/(|r|)sum_ru1^dagger(r)*u2(r)*exp(idkr)exp(-k0r)', abs(mltot)
!arg=0
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!



!!!!!! Vl real space direct charged supercell
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!



!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!M=1/(|r|) sum_rsuper u1^dagger(r)*u2(r)
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!





!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!! Vl in kspace charged potential from v(q)
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!M=      1/(|xk_f-xk_i|)sum_G' u1^dagger(G')*u2(G')*N_Gz
!!!!!!!!!!!!!!!!!M=sum_G 1/(|xk_f-xk_i-G|^2)sum_G' u1^dagger(G')*u2(G'+G)
!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!M=1/(|r|) sum_r u1^dagger(r)*u2(r)
!!!!!!!!!!!!!!!!!M=1/(|r|) sum_rsuper u1^dagger(r)*u2(r)
!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!M=sum_G V(|xk_f-xk_i-G|)sum_G' u1^dagger(G')*u2(G'+G) sum_z exp(-|z|q//) sum_Gz'' exp(-i(Gz'-Gz'')z)
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!



!psiprod(:)=0.00
!vgk(:)=0.00

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!M=      1/(|xk_f-xk_i|)sum_G' u1^dagger(G')*u2(G')*N_Gz
!deltak=((xk(1,ik)-xk(1,ik0))**2&
!       +(xk(2,ik)-xk(2,ik0))**2&
!       +(xk(3,ik)-xk(3,ik0))**2)**0.5
!
!deltak=deltak*tpiba
!
!psic2(1:dffts%nnr) = (0.d0,0.d0)
!psic1(1:dffts%nnr) = (0.d0,0.d0)
!DO ig = 1, ngk(ikk)
!   psic2 (dffts%nl (igk_k(ig,ikk) ) ) = evc2 (ig, ibnd)
!ENDDO
!DO ig = 1, ngk(ik0)
!   psic1 (dffts%nl (igk_k(ig,ik0) ) ) = evc1 (ig, ibnd0)
!ENDDO
!ml=0
!do  ig = 1, dffts%nnr
!   ml=ml+conjg(psic1(ig))*psic2(ig)
!enddo
!mltot=ml/(deltak**2+k0screen**2)
!ml=ml/deltak**2
!write(*,*)   'charged eq6 M=sum_G 1/(|xk_f-xk_i-G|)sum_Gp u1^dagger(Gp)*u2(Gp+G)*N_Gz', abs(ml)
!write(*,*)   'charged eq6s M=sum_G 1/(|xk_f-xk_i-G|)sum_Gp u1^dagger(Gp)*u2(Gp+G)*N_Gz', abs(mltot)
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


psiprod(:)=0.00
vgk(:)=0.00
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!M=      1/(|xk_f-xk_i|)sum_G' u1^dagger(G')*u2(G')*N_Gz
write(*,*) 'xk(ik)', xk(:,ik),ik
write(*,*) 'xk(ik0)', xk(:,ik0),ik0
deltak=((xk(1,ik)-xk(1,ik0))**2&
       +(xk(2,ik)-xk(2,ik0))**2)**0.5*tpiba
ml=0
mltot=0
icount=0
DO ig1 = 1, ngk(ik0)
  Do ig2=1,npw
    if (sum(abs(g(1:2,igk_k(ig1,ik0))-g(1:2,igk_k(ig2,ik))))<1e-4) then
       icount=icount+1
       ml=ml+conjg(evc1(ig1,ibnd0))*evc2(ig2,ibnd)
    endif
  Enddo
Enddo


mltot=ml*2*pi/(deltak**2+k0screen**2)**0.5
ml=ml*2*pi/deltak
write(*,*)   'charged 2D LFA ns', abs(ml), icount
write(*,*)   'charged 2D LFA s', abs(mltot)
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!M=sum_G V(|xk_f-xk_i-G|)sum_G' u1^dagger(G')*u2(G'+G) sum_z exp(-|z|q//) sum_Gz'' exp(-i(Gz'-Gz'')z)
!ml=0
!mltot=0
!psiprod(:)=0.00
!icount=0
!Do ig=1,ngm
!  DO ig1 = 1, ngk(ik0)
!    Do ig2=1,npw
!      if (sum(abs(g(1:2,igk_k(ig1,ik0))-g(1:2,igk_k(ig2,ik))-g(1:2,ig)))<1e-4) then
!         psiprod(ig)=psiprod(ig)+conjg(evc1(ig1,ibnd0))*evc2(ig2,ibnd)
!       icount=icount+1
!!write (*,*)'ig', ig, ig1, ig2
!     endif
!    Enddo
!  Enddo
!deltakG=((xk(1,ik0)-xk(1,ik)+g(1,ig))**2&
!        +(xk(2,ik0)-xk(2,ik)+g(2,ig))**2&
!     +0*(xk(3,ik0)-xk(3,ik)+g(3,ig))**2)**0.5*tpiba
!!write (*,*) 'dk+G', dletakG
!ml=ml+psiprod(ig)/(deltakG)
!mltot=mltot+psiprod(ig)/(deltakG+k0screen**2)
!Enddo
!ml=ml/dffts%nr3
!mltot=mltot/dffts%nr3
!write(*,*)  'charged 2D noLFA ns old', abs(ml), icount
!write(*,*)  'charged 2D noLFA s old', abs(mltot)
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!psi
ml=0
mltot=0
mltot1=0.00
icount=0
  DO ig1 = 1, ngk(ik0)
    Do ig2=1,npw
         mltot1=conjg(evc1(ig1,ibnd0))*evc2(ig2,ibnd)
       icount=icount+1
         deltakG=norm2(g(1:2,igk_k(ig1,ik0))&
                    -g(1:2,igk_k(ig2,ik))&
                    +xk(1:2,ik0)-xk(1:2,ik))*tpiba
!write (*,*) 'dk+G', dletakG
!      write (*,*) '(dG+dk)_// g1' , g(1:2,igk_k(ig1,ik0))
!      write (*,*) '(dG+dk)_// g2' , g(1:2,igk_k(ig2,ik))
!      write (*,*) '(dG+dk)_// k1 ' , xk(1:2,ik0)
!      write (*,*) '(dG+dk)_// k2 ' , xk(1:2,ik)
!      write (*,*) '(dG+dk)_//' ,(g(1:2,igk_k(ig1,ik0))-g(1:2,igk_k(ig2,ik))+xk(1:2,ik0)-xk(1:2,ik)), deltakG
         ml=ml+mltot1*2*pi/deltakG
         mltot=mltot+mltot1*2*pi/(deltakG**2+k0screen**2)**0.5
    Enddo
  Enddo
write(*,*)  'charged 2D noLFA ns', abs(ml),icount
write(*,*)  'charged 2D noLFA s', abs(mltot)
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
do Ngzcutoff=1,3
ml=0
mltot=0
mltot1=0.00
icount=0
  DO ig1 = 1, ngk(ik0)
    Do ig2=1,npw
         mltot1=conjg(evc1(ig1,ibnd0))*evc2(ig2,ibnd)
       icount=icount+1

         !deltakG=(norm2(xk(1:2,ik0)-xk(1:2,ik))**2+norm2(g(3,igk_k(ig1,ik0))-g(3,igk_k(ig2,ik)))**2)**0.5*tpiba
         deltakG=norm2(g(1:2,igk_k(ig1,ik0))&
                    -g(1:2,igk_k(ig2,ik))&
                    +xk(1:2,ik0)-xk(1:2,ik))*tpiba
         if (abs(g(3,igk_k(ig1,ik0))-g(3,igk_k(ig2,ik)))<2*Ngzcutoff ) then
          if(  norm2(g(1:2,igk_k(ig1,ik0))-g(1:2,igk_k(ig2,ik)))<1e-4) then
             ml=ml+mltot1*2*pi/deltakG
             mltot=mltot+mltot1*2*pi/(deltakG**2+k0screen**2)**0.5
         endif
         endif
    Enddo
  Enddo
write(*,*)  'charged 2D pLFA ns', abs(ml),icount, 'Ngz', Ngzcutoff
write(*,*)  'charged 2D pLFA s', abs(mltot), 'Ngz', Ngzcutoff
Enddo
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!



!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!! level1

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!M=sum_G 1/(|xk_f-xk_i-G|^2+k0^2)sum_G' u1^dagger(G')*u2(G'+G)
!!ml=0
!!mltot=0
!!psiprod(:)=0.00
!!deltakG=((xk(1,ik)-xk(1,ik0))**2&
!!        +(xk(2,ik)-xk(2,ik0))**2&
!!        +(xk(3,ik)-xk(3,ik0))**2)*tpiba**2
!!
!!!write(*,*)  'charged psiprod(ig) ', sum(psiprod(:)) ,deltakG
!!
!!Do ig=1,ngm
!!  DO ig1 = 1, ngk(ik0)
!!    Do ig2=1,npw
!!      if (sum(abs(g(:,igk_k(ig1,ik0))-g(:,igk_k(ig2,ik))))<1e-4) then
!!         psiprod(ig)=psiprod(ig)+conjg(evc1(ig1,ibnd0))*evc2(ig2,ibnd)
!!      endif
!!    Enddo
!!  Enddo
!!ml=ml+psiprod(ig)/(deltakG)
!!!write(*,*)  'charged psiprod(ig) ', psiprod(ig) ,deltakG
!!mltot=mltot+psiprod(ig)/(deltakG+k0screen**2)
!!Enddo
!!ml=ml/ngm
!!mltot=mltot/ngm
!!!write(*,*)  'charged psiprod(ig) ', sum(psiprod(:)) ,deltakG
!!write(*,*)  'charged 3D LFA ns old ', abs(ml),abs(ml), ngm
!!write(*,*)  'charged 3D LFA s old ', abs(mltot)
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!do iNlzcutoff = 0, 10
!do nNlzcutoff = 0, 1
!    Nlzcutoff=dffts%nr3/(10+40*nNlzcutoff)*iNlzcutoff+1
!    lzcutoff=Nlzcutoff*alat/dffts%nr1
!    
!    ml=0
!    ml2=0
!    ml3=0
!    mltot=0
!    mltot1=0.00
!    deltakG=((xk(1,ik)-xk(1,ik0))**2&
!            +(xk(2,ik)-xk(2,ik0))**2&
!            +(xk(3,ik)-xk(3,ik0))**2)**0.5*tpiba
!    
!    qxy=((xk(1,ik)-xk(1,ik0))**2&
!            +(xk(2,ik)-xk(2,ik0))**2)**0.5*tpiba
!    qz= ((xk(3,ik)-xk(3,ik0))**2)**0.5*tpiba
!    
!    !write(*,*)  'charged sumpsiprod(ig) ', sum(psiprod(:)) ,deltakG
!    DO ig1 = 1, ngk(ik0)
!      Do ig2=1,npw
!        if (sum(abs(g(:,igk_k(ig1,ik0))-g(:,igk_k(ig2,ik))))<1e-4) then
!           mltot1=mltot1+conjg(evc1(ig1,ibnd0))*evc2(ig2,ibnd)
!        endif
!      Enddo
!    Enddo
!    ml=ml+mltot1*4*pi/(deltakG**2)
!    mltot=mltot+mltot1*4*pi/(deltakG**2+k0screen**2)
!    ml2=ml2+mltot1*4*pi/(deltakG**2)*(1-(cos(qz*lzcutoff)-sin(qz*lzcutoff)*qz/qxy)*exp(-(qxy*lzcutoff)))
!    ml3=ml3+mltot1*4*pi/(deltakG**2+k0screen**2)*(1-(cos(qz*lzcutoff)-sin(qz*lzcutoff)*qz/qxy)*exp(-(qxy*lzcutoff)))
!    
!    !write(*,*)  'charged psiprod(ig) ', psiprod(ig) 
!    write(*,*)  'charged 3D LFA ns', abs(ml), 'Nz', Nlzcutoff
!    write(*,*)  'charged 3D LFA s', abs(mltot), 'Nz', Nlzcutoff
!    write(*,*)  'charged 3D cutoff LFA ns', abs(ml2), 'Nz', Nlzcutoff, 'exp -qp lz' ,&
!    -exp(-(qxy*lzcutoff)), qxy,lzcutoff,qxy*lzcutoff
!    ! (1-(cos(qz*lzcutoff)-sin(qz*lzcutoff)*qz/qxy)*exp(-(qxy*lzcutoff))),&
!    
!    write(*,*)  'charged 3D cutoff LFA s', abs(ml3), 'Nz', Nlzcutoff
!enddo
!enddo
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!M=sum_G 1/(|xk_f-xk_i-G|^2+k0^2)sum_G' u1^dagger(G')*u2(G'+G)
!!ml=0
!!mltot=0
!!psiprod(:)=0.00
!!Do ig=1,ngm
!!  DO ig1 = 1, ngk(ik0)
!!    Do ig2=1,npw
!!      if (sum(abs(g(:,igk_k(ig1,ik0))-g(:,igk_k(ig2,ik))-g(:,ig)))<1e-4) then
!!         psiprod(ig)=psiprod(ig)+conjg(evc1(ig1,ibnd0))*evc2(ig2,ibnd)
!!      endif
!!    Enddo
!!  Enddo
!!deltakG=((xk(1,ik0)-xk(1,ik)+g(1,ig))**2&
!!        +(xk(2,ik0)-xk(2,ik)+g(2,ig))**2&
!!        +(xk(3,ik0)-xk(3,ik)+g(3,ig))**2)*tpiba**2
!!ml=ml+psiprod(ig)/(deltakG)
!!mltot=mltot+psiprod(ig)/(deltakG+k0screen**2)
!!Enddo
!!write(*,*)  'charged 3D noLFA ns old', abs(ml)
!!write(*,*)  'charged 3D noLFA s old', abs(mltot)
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!do iNlzcutoff = 0, 10
!do nNlzcutoff = 0, 1
!    Nlzcutoff=dffts%nr3/(10+40*nNlzcutoff)*iNlzcutoff+1
!    lzcutoff=Nlzcutoff*alat/dffts%nr1
!    !lzcutoff=Nlzcutoff*alat/dffts%nr3
!    
!    ml=0
!    ml2=0
!    ml3=0
!    mltot=0
!    mltot1=0.00
!    !psiprod(:)=0.00
!    DO ig1 = 1, ngk(ik0)
!      Do ig2=1,npw
!    !      if (sum(abs(g(:,igk_k(ig1,ik0))-g(:,igk_k(ig2,ik))-g(:,ig)))<1e-4) then
!            ! psiprod(ig)=conjg(evc1(ig1,ibnd0))*evc2(ig2,ibnd)
!    
!             mltot1=conjg(evc1(ig1,ibnd0))*evc2(ig2,ibnd)
!    
!             deltakG=norm2(g(:,igk_k(ig1,ik0))&
!                        -g(:,igk_k(ig2,ik))&
!                        +xk(:,ik0)-xk(:,ik))*tpiba
!    
!             qxy=norm2(g(1:2,igk_k(ig1,ik0))&
!                        -g(1:2,igk_k(ig2,ik))&
!                        +xk(1:2,ik0)-xk(1:2,ik))*tpiba
!    
!             qz= ((g(3,igk_k(ig1,ik0))-g(3,igk_k(ig2,ik))+ &
!            xk(3,ik0)-xk(3,ik))**2)**0.5*tpiba
!    
!    
!    !      write (*,*) '(dG+dk)_// g1' ,  g(:,igk_k(ig1,ik0))
!    !      write (*,*) '(dG+dk)_// g2' ,  g(:,igk_k(ig2,ik))
!    !      write (*,*) '(dG+dk)_// k1 ', xk(:,ik0)
!    !      write (*,*) '(dG+dk)_// k2 ', xk(:,ik)
!    !      write (*,*) '(dG+dk)_//' ,(g(:,igk_k(ig1,ik0))-g(:,igk_k(ig2,ik))+xk(:,ik0)-xk(:,ik)), deltakG
!    ml=ml+mltot1*4*pi/(deltakG**2)
!    mltot=mltot+mltot1*4*pi/(deltakG**2+k0screen**2)
!    ml2=ml2+mltot1*4*pi/(deltakG**2)*(1-(cos(qz*lzcutoff)-sin(qz*lzcutoff)*qz/qxy)*exp(-(qxy*lzcutoff)))
!    ml3=ml3+mltot1*4*pi/(deltakG**2+k0screen**2)*(1-(cos(qz*lzcutoff)-sin(qz*lzcutoff)*qz/qxy)*exp(-(qxy*lzcutoff)))
!    !      endif
!      Enddo
!    Enddo
!    write(*,*)  'charged 3D noLFA ns', abs(ml), 'Nz', Nlzcutoff
!    write(*,*)  'charged 3D noLFA s', abs(mltot), 'Nz', Nlzcutoff
!    write(*,*)  'charged 3D cutoff noLFA ns', abs(ml2), 'Nz', Nlzcutoff, 'exp -qp lz' ,&
!    -exp(-(qxy*lzcutoff)), qxy,lzcutoff,qxy*lzcutoff
!    write(*,*)  'charged 3D cutoff noLFA s', abs(ml3), 'Nz', Nlzcutoff
!Enddo
!Enddo
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
do Ngzcutoff=1,3
do iNlzcutoff = 0, 1
do nNlzcutoff = 1, 1
    Nlzcutoff=dffts%nr3/(10+40*nNlzcutoff)*iNlzcutoff+1
    lzcutoff=Nlzcutoff*alat/dffts%nr1
    
    ml=0
    ml2=0
    ml3=0
    mltot=0
    mltot1=0.00
    DO ig1 = 1, ngk(ik0)
      Do ig2=1,npw
    
             mltot1=conjg(evc1(ig1,ibnd0))*evc2(ig2,ibnd)
             deltakG=norm2(g(:,igk_k(ig1,ik0))&
                        -g(:,igk_k(ig2,ik))&
                        +xk(:,ik0)-xk(:,ik))*tpiba
    
             qxy=norm2(g(1:2,igk_k(ig1,ik0))&
                        -g(1:2,igk_k(ig2,ik))&
                        +xk(1:2,ik0)-xk(1:2,ik))*tpiba
    
             qz= ((g(3,igk_k(ig1,ik0))-g(3,igk_k(ig2,ik))+ &
                  xk(3,ik0)-xk(3,ik))**2)**0.5*tpiba
             if (qz<2*Ngzcutoff*tpiba .and. norm2(g(1:2,igk_k(ig1,ik0))-g(1:2,igk_k(ig2,ik)))<1e-4) then
                 ml=ml+mltot1*4*pi/(deltakG**2)
                 mltot=mltot+mltot1*4*pi/(deltakG**2+k0screen**2)
                 ml2=ml2+mltot1*4*pi/(deltakG**2)*(1-(cos(qz*lzcutoff)-sin(qz*lzcutoff)*qz/qxy)*exp(-(qxy*lzcutoff)))
                 ml3=ml3+mltot1*4*pi/(deltakG**2+k0screen**2)*(1-(cos(qz*lzcutoff)-sin(qz*lzcutoff)*qz/qxy)*exp(-(qxy*lzcutoff)))
             endif
      Enddo
    Enddo
    write(*,*)  'charged 3D pLFA ns', abs(ml), 'Nz', Nlzcutoff, 'Ngz' , Ngzcutoff
    write(*,*)  'charged 3D pLFA s', abs(mltot), 'Nz', Nlzcutoff, 'Ngz' , Ngzcutoff
    write(*,*)  'charged 3D cutoff pLFA ns', abs(ml2), 'Nz', Nlzcutoff, 'exp -qp lz' ,&
    -exp(-(qxy*lzcutoff)), qxy,lzcutoff,qxy*lzcutoff, 'Ngz' , Ngzcutoff
    write(*,*)  'charged 3D cutoff pLFA s', abs(ml3), 'Nz', Nlzcutoff, 'Ngz' , Ngzcutoff
Enddo
Enddo
enddo
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!!! level2
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!! level3
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
do Ngzcutoff=1,5
do iNlzcutoff = 0, 1
do nNlzcutoff = 0, 0
    Nlzcutoff=dffts%nr3/(10+40*nNlzcutoff)*iNlzcutoff+1
    lzcutoff=Nlzcutoff*alat/dffts%nr1
    
    ml=0
    ml2=0
    ml3=0
    mltot=0
    mltot1=0.00
    DO ig1 = 1, ngk(ik0)
      Do ig2=1,npw
    
             mltot1=conjg(evc1(ig1,ibnd0))*evc2(ig2,ibnd)
             deltakG0=norm2(g(:,igk_k(ig1,ik0))&
                        -g(:,igk_k(ig2,ik))&
                        +xk(:,ik0)-xk(:,ik))*tpiba
    
             qxy=norm2(g(1:2,igk_k(ig1,ik0))&
                        -g(1:2,igk_k(ig2,ik))&
                        +xk(1:2,ik0)-xk(1:2,ik))*tpiba
    
             qz= ((g(3,igk_k(ig1,ik0))-g(3,igk_k(ig2,ik))+ &
                  xk(3,ik0)-xk(3,ik))**2)**0.5*tpiba
             deltakG=1/eps_data(2,1)
!             do ig=1,nepslines
!                if (qxy>eps_data(1,ig))then
!                   deltakG=1/eps_data(2,ig)
!                endif
!             enddo
             deltakG=(44.48*qxy+2.4123)/qxy
             if (qz<2*Ngzcutoff*tpiba .and. norm2(g(1:2,igk_k(ig1,ik0))-g(1:2,igk_k(ig2,ik)))<1e-4) then
                 ml=ml+mltot1*deltakG
                 ml2=ml2+mltot1*deltakG*2*qxy/(deltakG0**2)*(1-(cos(qz*lzcutoff)-sin(qz*lzcutoff)*qz/qxy)*exp(-(qxy*lzcutoff)))
                 ml3=ml2+mltot1*deltakG*2*qxy/(deltakG0**2)
             endif
      Enddo
    Enddo
    write(*,*)  'charged epsilon 2D pLFA s', abs(ml), 'Nz', Nlzcutoff, 'Ngz' , Ngzcutoff
!    -exp(-(qxy*lzcutoff)), qxy,lzcutoff,qxy*lzcutoff, 'Ngz' , Ngzcutoff
    write(*,*)  'charged epsilon cutoff pLFA s', abs(ml2), 'Nz', Nlzcutoff, 'Ngz' , Ngzcutoff
    write(*,*)  'charged epsilon 3D pLFA s', abs(ml3), 'Nz', Nlzcutoff, 'Ngz' , Ngzcutoff
Enddo
Enddo
enddo
!!! level3
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!




!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!! level2
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
do Ngzcutoff=1,5
do iNlzcutoff = 0, 1
do nNlzcutoff = 1, 1
    Nlzcutoff=dffts%nr3/(10+40*nNlzcutoff)*iNlzcutoff+1
    lzcutoff=Nlzcutoff*alat/dffts%nr1
    
    ml=0
    ml2=0
    ml3=0
    mltot=0
    mltot1=0.00
    DO ig1 = 1, ngk(ik0)
      Do ig2=1,npw
    
             mltot1=conjg(evc1(ig1,ibnd0))*evc2(ig2,ibnd)
             deltakG0=norm2(g(:,igk_k(ig1,ik0))&
                        -g(:,igk_k(ig2,ik))&
                        +xk(:,ik0)-xk(:,ik))*tpiba
    
             qxy=norm2(g(1:2,igk_k(ig1,ik0))&
                        -g(1:2,igk_k(ig2,ik))&
                        +xk(1:2,ik0)-xk(1:2,ik))*tpiba
    
             qz= ((g(3,igk_k(ig1,ik0))-g(3,igk_k(ig2,ik))+ &
                  xk(3,ik0)-xk(3,ik))**2)**0.5*tpiba
             deltakG=1/eps_data(2,1)
             do ig=1,nepslines
                if (qxy>eps_data(1,ig))then
                   deltakG=1/eps_data(2,ig)
                endif
             enddo
             if (qz<2*Ngzcutoff*tpiba .and. norm2(g(1:2,igk_k(ig1,ik0))-g(1:2,igk_k(ig2,ik)))<1e-4) then
                 ml=ml+mltot1*deltakG
                 ml2=ml2+mltot1*deltakG*2*qxy/(deltakG0**2)*(1-(cos(qz*lzcutoff)-sin(qz*lzcutoff)*qz/qxy)*exp(-(qxy*lzcutoff)))
                 ml3=ml2+mltot1*deltakG*2*qxy/(deltakG0**2)
             endif
      Enddo
    Enddo
    write(*,*)  'charged epsilon 2D pLFA s', abs(ml), 'Nz', Nlzcutoff, 'Ngz' , Ngzcutoff
!    -exp(-(qxy*lzcutoff)), qxy,lzcutoff,qxy*lzcutoff, 'Ngz' , Ngzcutoff
    write(*,*)  'charged epsilon cutoff pLFA s', abs(ml2), 'Nz', Nlzcutoff, 'Ngz' , Ngzcutoff
    write(*,*)  'charged epsilon 3D pLFA s', abs(ml2), 'Nz', Nlzcutoff, 'Ngz' , Ngzcutoff
Enddo
Enddo
enddo
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!









!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!M=sum_G 1/(|xk_f-xk_i-G|^2)sum_G' u1^dagger(G')*u2(G'+G)

do iNlzcutoff = 0, 10
  do nNlzcutoff = 0, 1
    Nlzcutoff=dffts%nr3/(10+40*nNlzcutoff)*iNlzcutoff+1
    lzcutoff=Nlzcutoff*alat/dffts%nr1
    
    psic2(1:dffts%nnr) = (0.d0,0.d0)
    psic1(1:dffts%nnr) = (0.d0,0.d0)
    DO ig = 1, ngk(ikk)
       psic2 (dffts%nl (igk_k(ig,ikk) ) ) = evc2 (ig, ibnd)
    ENDDO
    DO ig = 1, ngk(ik0)
       psic1 (dffts%nl (igk_k(ig,ik0) ) ) = evc1 (ig, ibnd0)
    ENDDO
    CALL invfft ('Wave', psic2, dffts)
    CALL invfft ('Wave', psic1, dffts)
    flag1=0
    DO ig = 1, dffts%nnr
        CALL fft_index_to_3d (ig, dffts, irx,iry,irz, offrange)
        if (irz>=Nlzcutoff .and. irz <=dffts%nr3-Nlzcutoff) then
           flag1=1
           psic1(ig)=0
           psic2(ig)=0
       endif
    enddo
    if (flag1==1) then
       write(*,*) 'charged 3Dto2D changed'
    endif
    CALL fwfft ('Wave', psic2, dffts)
    CALL fwfft ('Wave', psic1, dffts)
    !write(*,*)'xyz,ig', irx,iry,irz,ig
    evc3(:,:)=0.0
    evc4(:,:)=0.0
    DO ig = 1, ngk(ikk)
       evc4 (ig, ibnd)=  psic2 (dffts%nl (igk_k(ig,ikk) ) ) 
    ENDDO
    DO ig = 1, ngk(ik0)
       evc3 (ig, ibnd0)=  psic1 (dffts%nl (igk_k(ig,ik0) ) ) 
    ENDDO
    !        CALL save_buffer ( evc3, nwordwfc, iunwfc, ik0 )
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    ml=0
    mltot=0
    mltot1=0
    psiprod(:)=0.00
    !Do ig=1,ngm
      DO ig1 = 1, ngk(ik0)
        Do ig2=1,npw
          if (sum(abs(g(:,igk_k(ig1,ik0))-g(:,igk_k(ig2,ik))))<1e-4) then
             psiprod(ig)=psiprod(ig)+conjg(evc3(ig1,ibnd0))*evc4(ig2,ibnd)
             mltot1=mltot1+conjg(evc3(ig1,ibnd0))*evc4(ig2,ibnd)
          endif
        Enddo
      Enddo
    deltakG=((xk(1,ik)-xk(1,ik0))**2&
            +(xk(2,ik)-xk(2,ik0))**2&
            +(xk(3,ik)-xk(3,ik0))**2)**0.5*tpiba
    ml=ml+mltot1*4*pi/deltakG**2
    mltot=mltot+mltot1*4*pi/(deltakG**2+k0screen**2)
    !Enddo
    write(*,*)  'charged 3Dto2D LFA ns', abs(ml), 'Nz', Nlzcutoff
    write(*,*)  'charged 3Dto2D LFA s', abs(mltot), 'Nz', Nlzcutoff
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    ml=0
    mltot=0
    !psiprod(:)=0.00
    !Do ig=1,ngm
    mltot1=0
    DO ig1 = 1, ngk(ik0)
      Do ig2=1,npw
    !      if (sum(abs(g(:,igk_k(ig1,ik0))-g(:,igk_k(ig2,ik))-g(:,ig)))<1e-4) then
    !         psiprod(ig)=psiprod(ig)+conjg(evc1(ig1,ibnd0))*evc2(ig2,ibnd)
             deltakG=norm2(g(:,igk_k(ig1,ik0))&
                        -g(:,igk_k(ig2,ik))&
                        +xk(:,ik0)-xk(:,ik))*tpiba
            mltot1=conjg(evc3(ig1,ibnd0))*evc4(ig2,ibnd)
             ml=ml+mltot1*4*pi/deltakG**2
             mltot=mltot+mltot1*4*pi/(deltakG**2+k0screen**2)
    !      endif
      Enddo
    Enddo
    !ml=ml+mltot1/deltakG
    !mltot=mltot+mltot1/(deltakG+k
    !ml=ml+psiprod(ig)/deltakG
    !mltot=mltot+psiprod(ig)/(deltakG+k0screen**2)
    !Enddo
    write(*,*)  'charged 3Dto2D noLFA ns', abs(ml), 'Nz', Nlzcutoff
    write(*,*)  'charged 3Dto2D noLFA s', abs(mltot), 'Nz', Nlzcutoff
    
    !if (iNlzcutoff==2) then
    !        CALL open_buffer ( iuntmp, 'wfctemp', nwordwfc, io_level, exst )
    !        CALL save_buffer ( evc3, nwordwfc, iuntmp, ik0 )
    !        CALL close_buffer ( iuntmp, 'KEEP' )
    !        CALL open_buffer ( iunwfc, 'wfctemp', nwordwfc, io_level, exst )
    !        CALL save_buffer ( evc3, nwordwfc, iunwfc, ik0 )
    !        CALL close_buffer ( iunwfc, 'KEEP' )
    !endif
  enddo
enddo
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!





!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!M=sum_G 1/(|xk_f-xk_i-G|^2)sum_G' u1^dagger(G')*u2(G'+G)

do iNlzcutoff = 0, 10
  do nNlzcutoff = 0, 1
    Nlzcutoff=dffts%nr3/(10+40*nNlzcutoff)*iNlzcutoff+1
    lzcutoff=Nlzcutoff*alat/dffts%nr1
    evc3(:,:)=0.0
    evc4(:,:)=0.0
    
    DO ig = 1, ngk(ikk)
      DO ig1 = 1, ngk(ikk)
        qz= ((g(3,igk_k(ig1,ikk))-g(3,igk_k(ig,ikk)))**2)**0.5*tpiba
        if (qz==0) then
                 evc4 (ig, ibnd)=evc4(ig,ibnd)+  evc2(ig1,ibnd)*2*lzcutoff
        else
                 evc4 (ig, ibnd)=evc4(ig,ibnd)+  evc2(ig1,ibnd)*2*sin(qz*lzcutoff)/qz
        endif
      Enddo
    ENDDO
    evc4 (:,:)=evc4(:,:)/(dffts%nr3/dffts%nr1*alat)/4/pi
    DO ig = 1, ngk(ik0)
     evc3 (ig, ibnd0)=  evc1 (ig, ibnd0)
    ENDDO
    !        CALL save_buffer ( evc3, nwordwfc, iunwfc, ik0 )
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    ml=0
    mltot=0
    mltot1=0
    psiprod(:)=0.00
    !Do ig=1,ngm
    DO ig1 = 1, ngk(ik0)
      Do ig2=1,npw
        if (sum(abs(g(:,igk_k(ig1,ik0))-g(:,igk_k(ig2,ik))))<1e-4) then
           psiprod(ig)=psiprod(ig)+conjg(evc3(ig1,ibnd0))*evc4(ig2,ibnd)
           mltot1=mltot1+conjg(evc3(ig1,ibnd0))*evc4(ig2,ibnd)
        endif
      Enddo
    Enddo
    deltakG=((xk(1,ik)-xk(1,ik0))**2&
            +(xk(2,ik)-xk(2,ik0))**2&
            +(xk(3,ik)-xk(3,ik0))**2)**0.5*tpiba
    ml=ml+mltot1*4*pi/deltakG**2
    mltot=mltot+mltot1*4*pi/(deltakG**2+k0screen**2)
    !Enddo
    write(*,*)  'charged 3Dto2Danalytic LFA ns', abs(ml), 'Nz', Nlzcutoff
    write(*,*)  'charged 3Dto2Danalytic LFA s', abs(mltot), 'Nz', Nlzcutoff
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    ml=0
    mltot=0
    !psiprod(:)=0.00
    !Do ig=1,ngm
    mltot1=0
    DO ig1 = 1, ngk(ik0)
      Do ig2=1,npw
    !  if (sum(abs(g(:,igk_k(ig1,ik0))-g(:,igk_k(ig2,ik))-g(:,ig)))<1e-4) then
    !    psiprod(ig)=psiprod(ig)+conjg(evc1(ig1,ibnd0))*evc2(ig2,ibnd)
         deltakG=norm2(g(:,igk_k(ig1,ik0))&
                  -g(:,igk_k(ig2,ik))&
                    +xk(:,ik0)-xk(:,ik))*tpiba
         mltot1=conjg(evc3(ig1,ibnd0))*evc4(ig2,ibnd)
         ml=ml+mltot1*4*pi/deltakG**2
         mltot=mltot+mltot1*4*pi/(deltakG**2+k0screen**2)
    !  endif
      Enddo
    Enddo
    !ml=ml+mltot1/deltakG
    !mltot=mltot+mltot1/(deltakG+k
    !ml=ml+psiprod(ig)/deltakG
    !mltot=mltot+psiprod(ig)/(deltakG+k0screen**2)
    !Enddo
    write(*,*)  'charged 3Dto2Danalytic noLFA ns', abs(ml), 'Nz', Nlzcutoff
    write(*,*)  'charged 3Dto2Danalytic noLFA s', abs(mltot), 'Nz', Nlzcutoff
    
    !if (iNlzcutoff==2) then
    !        CALL open_buffer ( iuntmp, 'wfctemp', nwordwfc, io_level, exst )
    !        CALL save_buffer ( evc3, nwordwfc, iuntmp, ik0 )
    !        CALL close_buffer ( iuntmp, 'KEEP' )
    !        CALL open_buffer ( iunwfc, 'wfctemp', nwordwfc, io_level, exst )
    !        CALL save_buffer ( evc3, nwordwfc, iunwfc, ik0 )
    !        CALL close_buffer ( iunwfc, 'KEEP' )
    !endif
  enddo
enddo
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!! level2
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!












!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!M=1/(|r|) sum_r u1^dagger(r)*u2(r)
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!M=1/(|r|) sum_rsuper u1^dagger(r)*u2(r)
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!! level 5

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


Do ig=1,ngm
  DO ig1 = 1, ngk(ik0)
    Do ig2=1,npw
      if (sum(abs(g(:,igk_k(ig1,ik0))-g(:,igk_k(ig2,ik))-g(:,ig)))<1e-4) then
         psiprod(ig)=psiprod(ig)+conjg(evc1(ig1,ibnd0))*evc2(ig2,ibnd)
      endif
    Enddo
  Enddo

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!psi=u*exp(i*k*x)
!!!!!!!!!!!!!!!!!V_g=int V(r)*exp(-i*g*r)
!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
deltak=((xk(1,ik)-xk(1,ik0))**2\
       +(xk(2,ik)-xk(2,ik0))**2\
       +(xk(3,ik)-xk(3,ik0))**2)**0.5

deltakG=((xk(1,ik)-xk(1,ik0)+g(1,ig))**2\
        +(xk(2,ik)-xk(2,ik0)+g(2,ig))**2\
        +(xk(3,ik)-xk(3,ik0)+g(3,ig))**2)**0.5


arg=tpi*(real(irx)/dffts%nr1*at(1,1)+real(iry)/dffts%nr2*at(1,2)+real(irz)/dffts%nr3*at(1,3))*(xk(1,ik)-xk(1,ik0)) +&
    tpi*(real(irx)/dffts%nr1*at(2,1)+real(iry)/dffts%nr2*at(2,2)+real(irz)/dffts%nr3*at(2,3))*(xk(2,ik)-xk(2,ik0)) +&
    tpi*(real(irx)/dffts%nr1*at(3,1)+real(iry)/dffts%nr2*at(3,2)+real(irz)/dffts%nr3*at(3,3))*(xk(3,ik)-xk(3,ik0))   
    phase=CMPLX(COS(arg),SIN(arg),kind=dp)
    CALL fft_index_to_3d (dffts%nl (ig ), dffts, irx,iry,irz, offrange)
!    CALL fft_index_to_3d (inr, dffts, irx,iry,irz, offrange)
!ml=ml+psiprod(ig)/((irx**2+iry**2)**.5 +1)
ml=ml+psiprod(ig)/((irx**2+iry**2)**.5 +1)
!vgk(ig)
!write(*,*) 'psiprod vgk',psiprod(ig)
Enddo
ml=ml/dffts%nnr
mltot2=mltot2+ml*wg(ibnd,ikk)!
!write(*,*) 'psiprod',psiprod
write(*,*) 'ml in charge',ml, 'abs', abs(ml),log(ml) !,'mltot',mltot2
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!! Vl in kspace charged potential from v(q)
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!!!!!!! level 0
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!



  END SUBROUTINE calcmdefect_charge

END SUBROUTINE calcmdefect


